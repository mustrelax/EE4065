
EE4065_HW1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ac0  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b30  08002c84  08002c84  00003c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b4  080077b4  0000905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080077b4  080077b4  000087b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077bc  080077bc  0000905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077bc  080077bc  000087bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077c0  080077c0  000087c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080077c4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000178a0  2000005c  08007820  0000905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200178fc  08007820  000098fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e35  00000000  00000000  0000908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014c5  00000000  00000000  00010ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a0  00000000  00000000  00012388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000512  00000000  00000000  00012a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020bef  00000000  00000000  00012f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008c5a  00000000  00000000  00033b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c846a  00000000  00000000  0003c783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104bed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d64  00000000  00000000  00104c30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00106994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000005c 	.word	0x2000005c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c6c 	.word	0x08002c6c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000060 	.word	0x20000060
 8000200:	08002c6c 	.word	0x08002c6c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0da      	sub	sp, #360	@ 0x168
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000536:	f000 fbed 	bl	8000d14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053a:	f000 fa03 	bl	8000944 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053e:	f000 fa99 	bl	8000a74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000542:	f000 fa6d 	bl	8000a20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	const uint8_t *image_data_ptr = grayscale_img_data;
 8000546:	4bd7      	ldr	r3, [pc, #860]	@ (80008a4 <main+0x374>)
 8000548:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c

	/* Q2.a - Negative Image: Basically subtract image data from 255 to reverse its colors. */
	for (int i = 0; i < IMAGE_SIZE; i++){
 800054c:	2300      	movs	r3, #0
 800054e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8000552:	e011      	b.n	8000578 <main+0x48>
	negative_image_data[i] = 255 - grayscale_img_data[i];
 8000554:	4ad3      	ldr	r2, [pc, #844]	@ (80008a4 <main+0x374>)
 8000556:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800055a:	4413      	add	r3, r2
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	43db      	mvns	r3, r3
 8000560:	b2d9      	uxtb	r1, r3
 8000562:	4ad1      	ldr	r2, [pc, #836]	@ (80008a8 <main+0x378>)
 8000564:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000568:	4413      	add	r3, r2
 800056a:	460a      	mov	r2, r1
 800056c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IMAGE_SIZE; i++){
 800056e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000572:	3301      	adds	r3, #1
 8000574:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8000578:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800057c:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 8000580:	dbe8      	blt.n	8000554 <main+0x24>
	}

	/* Q2.b - Thresholding: Reduces the image to black and white.
	* If the pixel value is greater than a specified threshold, it is set to white (255); otherwise, it is set to black (0). */
	uint8_t threshold_value = 128;
 8000582:	2380      	movs	r3, #128	@ 0x80
 8000584:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
	for (int i = 0; i < IMAGE_SIZE; i++){
 8000588:	2300      	movs	r3, #0
 800058a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 800058e:	e01a      	b.n	80005c6 <main+0x96>
	  if (grayscale_img_data[i] > threshold_value){
 8000590:	4ac4      	ldr	r2, [pc, #784]	@ (80008a4 <main+0x374>)
 8000592:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000596:	4413      	add	r3, r2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	f897 214b 	ldrb.w	r2, [r7, #331]	@ 0x14b
 800059e:	429a      	cmp	r2, r3
 80005a0:	d206      	bcs.n	80005b0 <main+0x80>
			threshold_image_data[i] = 255;
 80005a2:	4ac2      	ldr	r2, [pc, #776]	@ (80008ac <main+0x37c>)
 80005a4:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80005a8:	4413      	add	r3, r2
 80005aa:	22ff      	movs	r2, #255	@ 0xff
 80005ac:	701a      	strb	r2, [r3, #0]
 80005ae:	e005      	b.n	80005bc <main+0x8c>
			}

	  else{
		  threshold_image_data[i] = 0;
 80005b0:	4abe      	ldr	r2, [pc, #760]	@ (80008ac <main+0x37c>)
 80005b2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80005b6:	4413      	add	r3, r2
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IMAGE_SIZE; i++){
 80005bc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80005c0:	3301      	adds	r3, #1
 80005c2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80005c6:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80005ca:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 80005ce:	dbdf      	blt.n	8000590 <main+0x60>

  /* Q2.c: Gamma Correction */

	// Gamma = 3
	uint8_t gamma_lut_dark[256];
	for (int i = 0; i < 256; i++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 80005d6:	e029      	b.n	800062c <main+0xfc>
		gamma_lut_dark[i] = (uint8_t)(powf(i / 255.0f, 3.0f) * 255.0f);
 80005d8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80005dc:	ee07 3a90 	vmov	s15, r3
 80005e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005e4:	eddf 6ab2 	vldr	s13, [pc, #712]	@ 80008b0 <main+0x380>
 80005e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80005ec:	eef0 0a08 	vmov.f32	s1, #8	@ 0x40400000  3.0
 80005f0:	eeb0 0a47 	vmov.f32	s0, s14
 80005f4:	f001 ff72 	bl	80024dc <powf>
 80005f8:	eef0 7a40 	vmov.f32	s15, s0
 80005fc:	ed9f 7aac 	vldr	s14, [pc, #688]	@ 80008b0 <main+0x380>
 8000600:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000608:	edc7 7a01 	vstr	s15, [r7, #4]
 800060c:	793b      	ldrb	r3, [r7, #4]
 800060e:	b2d9      	uxtb	r1, r3
 8000610:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8000614:	f5a3 72b0 	sub.w	r2, r3, #352	@ 0x160
 8000618:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800061c:	4413      	add	r3, r2
 800061e:	460a      	mov	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 256; i++) {
 8000622:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000626:	3301      	adds	r3, #1
 8000628:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 800062c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8000630:	2bff      	cmp	r3, #255	@ 0xff
 8000632:	ddd1      	ble.n	80005d8 <main+0xa8>
	}
	for (int i = 0; i < IMAGE_SIZE; i++) {
 8000634:	2300      	movs	r3, #0
 8000636:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800063a:	e015      	b.n	8000668 <main+0x138>
		gamma_dark_image_data[i] = gamma_lut_dark[grayscale_img_data[i]];
 800063c:	4a99      	ldr	r2, [pc, #612]	@ (80008a4 <main+0x374>)
 800063e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000642:	4413      	add	r3, r2
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800064c:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8000650:	5c99      	ldrb	r1, [r3, r2]
 8000652:	4a98      	ldr	r2, [pc, #608]	@ (80008b4 <main+0x384>)
 8000654:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000658:	4413      	add	r3, r2
 800065a:	460a      	mov	r2, r1
 800065c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IMAGE_SIZE; i++) {
 800065e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8000662:	3301      	adds	r3, #1
 8000664:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8000668:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800066c:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 8000670:	dbe4      	blt.n	800063c <main+0x10c>
	}

	// Gamma = 1/3 - piecewise linear approach (since taking root is slower process as we've talked during the class)
	// Points chosen: (x1,y1)=(0,0), (x2,y2)=(64,161), (x3,y3)=(192,230), (x4,y4)=(255,255)
	const int x1=0,   y1=0;
 8000672:	2300      	movs	r3, #0
 8000674:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
	const int x2=64,  y2=161;
 800067e:	2340      	movs	r3, #64	@ 0x40
 8000680:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8000684:	23a1      	movs	r3, #161	@ 0xa1
 8000686:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
	const int x3=192, y3=230;
 800068a:	23c0      	movs	r3, #192	@ 0xc0
 800068c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000690:	23e6      	movs	r3, #230	@ 0xe6
 8000692:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	const int x4=255, y4=255;
 8000696:	23ff      	movs	r3, #255	@ 0xff
 8000698:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800069c:	23ff      	movs	r3, #255	@ 0xff
 800069e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

	// slopes
	const float m1 = (float)(y2 - y1) / (x2 - x1);
 80006a2:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80006a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	ee07 3a90 	vmov	s15, r3
 80006b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006b4:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80006b8:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80006bc:	1ad3      	subs	r3, r2, r3
 80006be:	ee07 3a90 	vmov	s15, r3
 80006c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006ca:	edc7 7a49 	vstr	s15, [r7, #292]	@ 0x124
	const float m2 = (float)(y3 - y2) / (x3 - x2);
 80006ce:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80006d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80006d6:	1ad3      	subs	r3, r2, r3
 80006d8:	ee07 3a90 	vmov	s15, r3
 80006dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80006e0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80006e4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	ee07 3a90 	vmov	s15, r3
 80006ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006f6:	edc7 7a48 	vstr	s15, [r7, #288]	@ 0x120
	const float m3 = (float)(y4 - y3) / (x4 - x3);
 80006fa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80006fe:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	ee07 3a90 	vmov	s15, r3
 8000708:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800070c:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8000710:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8000714:	1ad3      	subs	r3, r2, r3
 8000716:	ee07 3a90 	vmov	s15, r3
 800071a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800071e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000722:	edc7 7a47 	vstr	s15, [r7, #284]	@ 0x11c

	for (int i = 0; i < IMAGE_SIZE; i++){
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800072c:	e07c      	b.n	8000828 <main+0x2f8>
		uint8_t pixel_value = grayscale_img_data[i];
 800072e:	4a5d      	ldr	r2, [pc, #372]	@ (80008a4 <main+0x374>)
 8000730:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000734:	4413      	add	r3, r2
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

		if (pixel_value <= x2){ // 0-64
 800073c:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 8000740:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8000744:	429a      	cmp	r2, r3
 8000746:	db21      	blt.n	800078c <main+0x25c>
			// y = m*(x-x1) + y1
			gamma_bright_image_data[i] = (uint8_t)(m1 * (pixel_value - x1) + y1);
 8000748:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 800074c:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8000750:	1ad3      	subs	r3, r2, r3
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800075a:	edd7 7a49 	vldr	s15, [r7, #292]	@ 0x124
 800075e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000762:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8000766:	ee07 3a90 	vmov	s15, r3
 800076a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800076e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000776:	edc7 7a01 	vstr	s15, [r7, #4]
 800077a:	793b      	ldrb	r3, [r7, #4]
 800077c:	b2d9      	uxtb	r1, r3
 800077e:	4a4e      	ldr	r2, [pc, #312]	@ (80008b8 <main+0x388>)
 8000780:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000784:	4413      	add	r3, r2
 8000786:	460a      	mov	r2, r1
 8000788:	701a      	strb	r2, [r3, #0]
 800078a:	e048      	b.n	800081e <main+0x2ee>
		}
		else if (pixel_value <= x3){ // 64-192
 800078c:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
 8000790:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8000794:	429a      	cmp	r2, r3
 8000796:	db21      	blt.n	80007dc <main+0x2ac>
			// y = m*(x-x2) + y2
			gamma_bright_image_data[i] = (uint8_t)(m2 * (pixel_value - x2) + y2);
 8000798:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 800079c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	ee07 3a90 	vmov	s15, r3
 80007a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007aa:	edd7 7a48 	vldr	s15, [r7, #288]	@ 0x120
 80007ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007b2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80007b6:	ee07 3a90 	vmov	s15, r3
 80007ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c6:	edc7 7a01 	vstr	s15, [r7, #4]
 80007ca:	793b      	ldrb	r3, [r7, #4]
 80007cc:	b2d9      	uxtb	r1, r3
 80007ce:	4a3a      	ldr	r2, [pc, #232]	@ (80008b8 <main+0x388>)
 80007d0:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80007d4:	4413      	add	r3, r2
 80007d6:	460a      	mov	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	e020      	b.n	800081e <main+0x2ee>
		}
		else{ // 192-255
			// y = m*(x-x3) + y3
			gamma_bright_image_data[i] = (uint8_t)(m3 * (pixel_value - x3) + y3);
 80007dc:	f897 210a 	ldrb.w	r2, [r7, #266]	@ 0x10a
 80007e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ee:	edd7 7a47 	vldr	s15, [r7, #284]	@ 0x11c
 80007f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80007f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80007fa:	ee07 3a90 	vmov	s15, r3
 80007fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000802:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800080a:	edc7 7a01 	vstr	s15, [r7, #4]
 800080e:	793b      	ldrb	r3, [r7, #4]
 8000810:	b2d9      	uxtb	r1, r3
 8000812:	4a29      	ldr	r2, [pc, #164]	@ (80008b8 <main+0x388>)
 8000814:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000818:	4413      	add	r3, r2
 800081a:	460a      	mov	r2, r1
 800081c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < IMAGE_SIZE; i++){
 800081e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8000822:	3301      	adds	r3, #1
 8000824:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8000828:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800082c:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 8000830:	f6ff af7d 	blt.w	800072e <main+0x1fe>
		}
	}

	/* Q2.d: Piecewise linear transformations for the part in b. */
	  int r1 = 50,  s1 = 0;
 8000834:	2332      	movs	r3, #50	@ 0x32
 8000836:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800083a:	2300      	movs	r3, #0
 800083c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	  int r2 = 150, s2 = 255;
 8000840:	2396      	movs	r3, #150	@ 0x96
 8000842:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8000846:	23ff      	movs	r3, #255	@ 0xff
 8000848:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

	  for (int i = 0; i < IMAGE_SIZE; i++){
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000852:	e06d      	b.n	8000930 <main+0x400>
	      uint8_t pixel_value = grayscale_img_data[i];
 8000854:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <main+0x374>)
 8000856:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

	      if (pixel_value < r1){
 8000862:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000866:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800086a:	429a      	cmp	r2, r3
 800086c:	dd09      	ble.n	8000882 <main+0x352>
	          piecewise_image_data[i] = s1;
 800086e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000872:	b2d9      	uxtb	r1, r3
 8000874:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <main+0x38c>)
 8000876:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800087a:	4413      	add	r3, r2
 800087c:	460a      	mov	r2, r1
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	e051      	b.n	8000926 <main+0x3f6>
	      }
	      else if (pixel_value > r2){
 8000882:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8000886:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800088a:	429a      	cmp	r2, r3
 800088c:	da18      	bge.n	80008c0 <main+0x390>
	          piecewise_image_data[i] = s2;
 800088e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8000892:	b2d9      	uxtb	r1, r3
 8000894:	4a09      	ldr	r2, [pc, #36]	@ (80008bc <main+0x38c>)
 8000896:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800089a:	4413      	add	r3, r2
 800089c:	460a      	mov	r2, r1
 800089e:	701a      	strb	r2, [r3, #0]
 80008a0:	e041      	b.n	8000926 <main+0x3f6>
 80008a2:	bf00      	nop
 80008a4:	08002c84 	.word	0x08002c84
 80008a8:	200000c0 	.word	0x200000c0
 80008ac:	20004bc0 	.word	0x20004bc0
 80008b0:	437f0000 	.word	0x437f0000
 80008b4:	200096c0 	.word	0x200096c0
 80008b8:	2000e1c0 	.word	0x2000e1c0
 80008bc:	20012cc0 	.word	0x20012cc0
	      }
	      else{
	          piecewise_image_data[i] = (uint8_t)(((float)(pixel_value - r1) / (r2 - r1)) * (s2 - s1) + s1);
 80008c0:	f897 210b 	ldrb.w	r2, [r7, #267]	@ 0x10b
 80008c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80008c8:	1ad3      	subs	r3, r2, r3
 80008ca:	ee07 3a90 	vmov	s15, r3
 80008ce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80008d2:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80008d6:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80008da:	1ad3      	subs	r3, r2, r3
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80008e8:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 80008ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80008fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000902:	ee07 3a90 	vmov	s15, r3
 8000906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800090a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800090e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000912:	edc7 7a01 	vstr	s15, [r7, #4]
 8000916:	793b      	ldrb	r3, [r7, #4]
 8000918:	b2d9      	uxtb	r1, r3
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <main+0x410>)
 800091c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000920:	4413      	add	r3, r2
 8000922:	460a      	mov	r2, r1
 8000924:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < IMAGE_SIZE; i++){
 8000926:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800092a:	3301      	adds	r3, #1
 800092c:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8000930:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8000934:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 8000938:	db8c      	blt.n	8000854 <main+0x324>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800093a:	bf00      	nop
 800093c:	e7fd      	b.n	800093a <main+0x40a>
 800093e:	bf00      	nop
 8000940:	20012cc0 	.word	0x20012cc0

08000944 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b094      	sub	sp, #80	@ 0x50
 8000948:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2234      	movs	r2, #52	@ 0x34
 8000950:	2100      	movs	r1, #0
 8000952:	4618      	mov	r0, r3
 8000954:	f001 fd90 	bl	8002478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000958:	f107 0308 	add.w	r3, r7, #8
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a18 <SystemClock_Config+0xd4>)
 800096e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000970:	4a29      	ldr	r2, [pc, #164]	@ (8000a18 <SystemClock_Config+0xd4>)
 8000972:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000976:	6413      	str	r3, [r2, #64]	@ 0x40
 8000978:	4b27      	ldr	r3, [pc, #156]	@ (8000a18 <SystemClock_Config+0xd4>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	4b24      	ldr	r3, [pc, #144]	@ (8000a1c <SystemClock_Config+0xd8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000990:	4a22      	ldr	r2, [pc, #136]	@ (8000a1c <SystemClock_Config+0xd8>)
 8000992:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b20      	ldr	r3, [pc, #128]	@ (8000a1c <SystemClock_Config+0xd8>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009a8:	2301      	movs	r3, #1
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ac:	2310      	movs	r3, #16
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b0:	2302      	movs	r3, #2
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b4:	2300      	movs	r3, #0
 80009b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009b8:	2310      	movs	r3, #16
 80009ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009bc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009c2:	2304      	movs	r3, #4
 80009c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 ffee 	bl	80019b4 <HAL_RCC_OscConfig>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009de:	f000 f8b7 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e2:	230f      	movs	r3, #15
 80009e4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	2302      	movs	r3, #2
 80009e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2102      	movs	r1, #2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f000 fc8e 	bl	8001320 <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a0a:	f000 f8a1 	bl	8000b50 <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3750      	adds	r7, #80	@ 0x50
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40007000 	.word	0x40007000

08000a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a26:	4a12      	ldr	r2, [pc, #72]	@ (8000a70 <MX_USART2_UART_Init+0x50>)
 8000a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a46:	220c      	movs	r2, #12
 8000a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <MX_USART2_UART_Init+0x4c>)
 8000a58:	f001 fa4a 	bl	8001ef0 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a62:	f000 f875 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000078 	.word	0x20000078
 8000a70:	40004400 	.word	0x40004400

08000a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	4a2c      	ldr	r2, [pc, #176]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000a94:	f043 0304 	orr.w	r3, r3, #4
 8000a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b26      	ldr	r3, [pc, #152]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a25      	ldr	r2, [pc, #148]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000ab0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b23      	ldr	r3, [pc, #140]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a1e      	ldr	r2, [pc, #120]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	2120      	movs	r1, #32
 8000afe:	4812      	ldr	r0, [pc, #72]	@ (8000b48 <MX_GPIO_Init+0xd4>)
 8000b00:	f000 fbf4 	bl	80012ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b0a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	480c      	ldr	r0, [pc, #48]	@ (8000b4c <MX_GPIO_Init+0xd8>)
 8000b1c:	f000 fa52 	bl	8000fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b20:	2320      	movs	r3, #32
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b24:	2301      	movs	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	4804      	ldr	r0, [pc, #16]	@ (8000b48 <MX_GPIO_Init+0xd4>)
 8000b38:	f000 fa44 	bl	8000fc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	@ 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020800 	.word	0x40020800

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	bf00      	nop
 8000b5a:	e7fd      	b.n	8000b58 <Error_Handler+0x8>

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b9a:	2007      	movs	r0, #7
 8000b9c:	f000 f9de 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	@ 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	@ (8000c30 <HAL_UART_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12b      	bne.n	8000c26 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	4a17      	ldr	r2, [pc, #92]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bde:	4b15      	ldr	r3, [pc, #84]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a10      	ldr	r2, [pc, #64]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c06:	230c      	movs	r3, #12
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c16:	2307      	movs	r3, #7
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <HAL_UART_MspInit+0x8c>)
 8000c22:	f000 f9cf 	bl	8000fc4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40004400 	.word	0x40004400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <NMI_Handler+0x4>

08000c44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <MemManage_Handler+0x4>

08000c54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <BusFault_Handler+0x4>

08000c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <UsageFault_Handler+0x4>

08000c64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr

08000c72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr

08000c80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr

08000c8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c92:	f000 f891 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	@ (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f001 fbd1 	bl	8002494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf2:	f7ff fc1d 	bl	8000530 <main>
  bx  lr    
 8000cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cf8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d04:	080077c4 	.word	0x080077c4
  ldr r2, =_sbss
 8000d08:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d0c:	200178fc 	.word	0x200178fc

08000d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC_IRQHandler>
	...

08000d14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d18:	4b0e      	ldr	r3, [pc, #56]	@ (8000d54 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000d54 <HAL_Init+0x40>)
 8000d1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a0a      	ldr	r2, [pc, #40]	@ (8000d54 <HAL_Init+0x40>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d30:	4b08      	ldr	r3, [pc, #32]	@ (8000d54 <HAL_Init+0x40>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a07      	ldr	r2, [pc, #28]	@ (8000d54 <HAL_Init+0x40>)
 8000d36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f90d 	bl	8000f5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f808 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d48:	f7ff ff08 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4c:	2300      	movs	r3, #0
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023c00 	.word	0x40023c00

08000d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d60:	4b12      	ldr	r3, [pc, #72]	@ (8000dac <HAL_InitTick+0x54>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_InitTick+0x58>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f917 	bl	8000faa <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e00e      	b.n	8000da4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2b0f      	cmp	r3, #15
 8000d8a:	d80a      	bhi.n	8000da2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	6879      	ldr	r1, [r7, #4]
 8000d90:	f04f 30ff 	mov.w	r0, #4294967295
 8000d94:	f000 f8ed 	bl	8000f72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <HAL_InitTick+0x5c>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000008 	.word	0x20000008
 8000db4:	20000004 	.word	0x20000004

08000db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x20>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a04      	ldr	r2, [pc, #16]	@ (8000ddc <HAL_IncTick+0x24>)
 8000dca:	6013      	str	r3, [r2, #0]
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000008 	.word	0x20000008
 8000ddc:	200177c0 	.word	0x200177c0

08000de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return uwTick;
 8000de4:	4b03      	ldr	r3, [pc, #12]	@ (8000df4 <HAL_GetTick+0x14>)
 8000de6:	681b      	ldr	r3, [r3, #0]
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200177c0 	.word	0x200177c0

08000df8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f003 0307 	and.w	r3, r3, #7
 8000e06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e08:	4b0c      	ldr	r3, [pc, #48]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0e:	68ba      	ldr	r2, [r7, #8]
 8000e10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e14:	4013      	ands	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e1c:	68bb      	ldr	r3, [r7, #8]
 8000e1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e2a:	4a04      	ldr	r2, [pc, #16]	@ (8000e3c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	60d3      	str	r3, [r2, #12]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e44:	4b04      	ldr	r3, [pc, #16]	@ (8000e58 <__NVIC_GetPriorityGrouping+0x18>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	0a1b      	lsrs	r3, r3, #8
 8000e4a:	f003 0307 	and.w	r3, r3, #7
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	6039      	str	r1, [r7, #0]
 8000e66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	db0a      	blt.n	8000e86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	490c      	ldr	r1, [pc, #48]	@ (8000ea8 <__NVIC_SetPriority+0x4c>)
 8000e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7a:	0112      	lsls	r2, r2, #4
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	440b      	add	r3, r1
 8000e80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e84:	e00a      	b.n	8000e9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4908      	ldr	r1, [pc, #32]	@ (8000eac <__NVIC_SetPriority+0x50>)
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	f003 030f 	and.w	r3, r3, #15
 8000e92:	3b04      	subs	r3, #4
 8000e94:	0112      	lsls	r2, r2, #4
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	440b      	add	r3, r1
 8000e9a:	761a      	strb	r2, [r3, #24]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b089      	sub	sp, #36	@ 0x24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f1c3 0307 	rsb	r3, r3, #7
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	bf28      	it	cs
 8000ece:	2304      	movcs	r3, #4
 8000ed0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	d902      	bls.n	8000ee0 <NVIC_EncodePriority+0x30>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	3b03      	subs	r3, #3
 8000ede:	e000      	b.n	8000ee2 <NVIC_EncodePriority+0x32>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43da      	mvns	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	401a      	ands	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa01 f303 	lsl.w	r3, r1, r3
 8000f02:	43d9      	mvns	r1, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	4313      	orrs	r3, r2
         );
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3724      	adds	r7, #36	@ 0x24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
	...

08000f18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f28:	d301      	bcc.n	8000f2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e00f      	b.n	8000f4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <SysTick_Config+0x40>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f36:	210f      	movs	r1, #15
 8000f38:	f04f 30ff 	mov.w	r0, #4294967295
 8000f3c:	f7ff ff8e 	bl	8000e5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f40:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <SysTick_Config+0x40>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f46:	4b04      	ldr	r3, [pc, #16]	@ (8000f58 <SysTick_Config+0x40>)
 8000f48:	2207      	movs	r2, #7
 8000f4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	e000e010 	.word	0xe000e010

08000f5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff ff47 	bl	8000df8 <__NVIC_SetPriorityGrouping>
}
 8000f6a:	bf00      	nop
 8000f6c:	3708      	adds	r7, #8
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b086      	sub	sp, #24
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
 8000f7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f84:	f7ff ff5c 	bl	8000e40 <__NVIC_GetPriorityGrouping>
 8000f88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	68b9      	ldr	r1, [r7, #8]
 8000f8e:	6978      	ldr	r0, [r7, #20]
 8000f90:	f7ff ff8e 	bl	8000eb0 <NVIC_EncodePriority>
 8000f94:	4602      	mov	r2, r0
 8000f96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff5d 	bl	8000e5c <__NVIC_SetPriority>
}
 8000fa2:	bf00      	nop
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b082      	sub	sp, #8
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff ffb0 	bl	8000f18 <SysTick_Config>
 8000fb8:	4603      	mov	r3, r0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
	...

08000fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	@ 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
 8000fde:	e165      	b.n	80012ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	f040 8154 	bne.w	80012a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001012:	2b02      	cmp	r3, #2
 8001014:	d130      	bne.n	8001078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800104c:	2201      	movs	r2, #1
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	091b      	lsrs	r3, r3, #4
 8001062:	f003 0201 	and.w	r2, r3, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b03      	cmp	r3, #3
 8001082:	d017      	beq.n	80010b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 0303 	and.w	r3, r3, #3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d123      	bne.n	8001108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	f003 0307 	and.w	r3, r3, #7
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	220f      	movs	r2, #15
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	691a      	ldr	r2, [r3, #16]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	08da      	lsrs	r2, r3, #3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3208      	adds	r2, #8
 8001102:	69b9      	ldr	r1, [r7, #24]
 8001104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0203 	and.w	r2, r3, #3
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 80ae 	beq.w	80012a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
 800114e:	4b5d      	ldr	r3, [pc, #372]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	4a5c      	ldr	r2, [pc, #368]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 8001154:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001158:	6453      	str	r3, [r2, #68]	@ 0x44
 800115a:	4b5a      	ldr	r3, [pc, #360]	@ (80012c4 <HAL_GPIO_Init+0x300>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001166:	4a58      	ldr	r2, [pc, #352]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f003 0303 	and.w	r3, r3, #3
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	4013      	ands	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a4f      	ldr	r2, [pc, #316]	@ (80012cc <HAL_GPIO_Init+0x308>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x21a>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a4e      	ldr	r2, [pc, #312]	@ (80012d0 <HAL_GPIO_Init+0x30c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x216>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a4d      	ldr	r2, [pc, #308]	@ (80012d4 <HAL_GPIO_Init+0x310>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x212>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a4c      	ldr	r2, [pc, #304]	@ (80012d8 <HAL_GPIO_Init+0x314>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x20e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a4b      	ldr	r2, [pc, #300]	@ (80012dc <HAL_GPIO_Init+0x318>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x20a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a4a      	ldr	r2, [pc, #296]	@ (80012e0 <HAL_GPIO_Init+0x31c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x206>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a49      	ldr	r2, [pc, #292]	@ (80012e4 <HAL_GPIO_Init+0x320>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x202>
 80011c2:	2306      	movs	r3, #6
 80011c4:	e00c      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011c6:	2307      	movs	r3, #7
 80011c8:	e00a      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e008      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011ce:	2304      	movs	r3, #4
 80011d0:	e006      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d2:	2303      	movs	r3, #3
 80011d4:	e004      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011d6:	2302      	movs	r3, #2
 80011d8:	e002      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <HAL_GPIO_Init+0x21c>
 80011de:	2300      	movs	r3, #0
 80011e0:	69fa      	ldr	r2, [r7, #28]
 80011e2:	f002 0203 	and.w	r2, r2, #3
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	4093      	lsls	r3, r2
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011f0:	4935      	ldr	r1, [pc, #212]	@ (80012c8 <HAL_GPIO_Init+0x304>)
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011fe:	4b3a      	ldr	r3, [pc, #232]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	43db      	mvns	r3, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4013      	ands	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001222:	4a31      	ldr	r2, [pc, #196]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001228:	4b2f      	ldr	r3, [pc, #188]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	43db      	mvns	r3, r3
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	4013      	ands	r3, r2
 8001236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800124c:	4a26      	ldr	r2, [pc, #152]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001252:	4b25      	ldr	r3, [pc, #148]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	43db      	mvns	r3, r3
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	4013      	ands	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127c:	4b1a      	ldr	r3, [pc, #104]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012a0:	4a11      	ldr	r2, [pc, #68]	@ (80012e8 <HAL_GPIO_Init+0x324>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b0f      	cmp	r3, #15
 80012b0:	f67f ae96 	bls.w	8000fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3724      	adds	r7, #36	@ 0x24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40013800 	.word	0x40013800
 80012cc:	40020000 	.word	0x40020000
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020800 	.word	0x40020800
 80012d8:	40020c00 	.word	0x40020c00
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40021400 	.word	0x40021400
 80012e4:	40021800 	.word	0x40021800
 80012e8:	40013c00 	.word	0x40013c00

080012ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
 80012f8:	4613      	mov	r3, r2
 80012fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012fc:	787b      	ldrb	r3, [r7, #1]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d003      	beq.n	800130a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001308:	e003      	b.n	8001312 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	041a      	lsls	r2, r3, #16
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	619a      	str	r2, [r3, #24]
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e0cc      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b68      	ldr	r3, [pc, #416]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d90c      	bls.n	800135c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b65      	ldr	r3, [pc, #404]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800134a:	4b63      	ldr	r3, [pc, #396]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 030f 	and.w	r3, r3, #15
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0b8      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d020      	beq.n	80013aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001374:	4b59      	ldr	r3, [pc, #356]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	4a58      	ldr	r2, [pc, #352]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800137a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800137e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800138c:	4b53      	ldr	r3, [pc, #332]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	4a52      	ldr	r2, [pc, #328]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001392:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001398:	4b50      	ldr	r3, [pc, #320]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	494d      	ldr	r1, [pc, #308]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d044      	beq.n	8001440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d107      	bne.n	80013ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013be:	4b47      	ldr	r3, [pc, #284]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d119      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e07f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d003      	beq.n	80013de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013da:	2b03      	cmp	r3, #3
 80013dc:	d107      	bne.n	80013ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013de:	4b3f      	ldr	r3, [pc, #252]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e06f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ee:	4b3b      	ldr	r3, [pc, #236]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e067      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fe:	4b37      	ldr	r3, [pc, #220]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f023 0203 	bic.w	r2, r3, #3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4934      	ldr	r1, [pc, #208]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 800140c:	4313      	orrs	r3, r2
 800140e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001410:	f7ff fce6 	bl	8000de0 <HAL_GetTick>
 8001414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001416:	e00a      	b.n	800142e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001418:	f7ff fce2 	bl	8000de0 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001426:	4293      	cmp	r3, r2
 8001428:	d901      	bls.n	800142e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e04f      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	4b2b      	ldr	r3, [pc, #172]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f003 020c 	and.w	r2, r3, #12
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	429a      	cmp	r2, r3
 800143e:	d1eb      	bne.n	8001418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001440:	4b25      	ldr	r3, [pc, #148]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 030f 	and.w	r3, r3, #15
 8001448:	683a      	ldr	r2, [r7, #0]
 800144a:	429a      	cmp	r2, r3
 800144c:	d20c      	bcs.n	8001468 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144e:	4b22      	ldr	r3, [pc, #136]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001456:	4b20      	ldr	r3, [pc, #128]	@ (80014d8 <HAL_RCC_ClockConfig+0x1b8>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	683a      	ldr	r2, [r7, #0]
 8001460:	429a      	cmp	r2, r3
 8001462:	d001      	beq.n	8001468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e032      	b.n	80014ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001474:	4b19      	ldr	r3, [pc, #100]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	4916      	ldr	r1, [pc, #88]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001482:	4313      	orrs	r3, r2
 8001484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0308 	and.w	r3, r3, #8
 800148e:	2b00      	cmp	r3, #0
 8001490:	d009      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001492:	4b12      	ldr	r3, [pc, #72]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	00db      	lsls	r3, r3, #3
 80014a0:	490e      	ldr	r1, [pc, #56]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014a2:	4313      	orrs	r3, r2
 80014a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a6:	f000 f855 	bl	8001554 <HAL_RCC_GetSysClockFreq>
 80014aa:	4602      	mov	r2, r0
 80014ac:	4b0b      	ldr	r3, [pc, #44]	@ (80014dc <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	490a      	ldr	r1, [pc, #40]	@ (80014e0 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	5ccb      	ldrb	r3, [r1, r3]
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
 80014be:	4a09      	ldr	r2, [pc, #36]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <HAL_RCC_ClockConfig+0x1c8>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc46 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40023c00 	.word	0x40023c00
 80014dc:	40023800 	.word	0x40023800
 80014e0:	08007784 	.word	0x08007784
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000004 	.word	0x20000004

080014ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014f0:	4b03      	ldr	r3, [pc, #12]	@ (8001500 <HAL_RCC_GetHCLKFreq+0x14>)
 80014f2:	681b      	ldr	r3, [r3, #0]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	20000000 	.word	0x20000000

08001504 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001508:	f7ff fff0 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 800150c:	4602      	mov	r2, r0
 800150e:	4b05      	ldr	r3, [pc, #20]	@ (8001524 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0a9b      	lsrs	r3, r3, #10
 8001514:	f003 0307 	and.w	r3, r3, #7
 8001518:	4903      	ldr	r1, [pc, #12]	@ (8001528 <HAL_RCC_GetPCLK1Freq+0x24>)
 800151a:	5ccb      	ldrb	r3, [r1, r3]
 800151c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}
 8001524:	40023800 	.word	0x40023800
 8001528:	08007794 	.word	0x08007794

0800152c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001530:	f7ff ffdc 	bl	80014ec <HAL_RCC_GetHCLKFreq>
 8001534:	4602      	mov	r2, r0
 8001536:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	0b5b      	lsrs	r3, r3, #13
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	4903      	ldr	r1, [pc, #12]	@ (8001550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001542:	5ccb      	ldrb	r3, [r1, r3]
 8001544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001548:	4618      	mov	r0, r3
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40023800 	.word	0x40023800
 8001550:	08007794 	.word	0x08007794

08001554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001554:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001558:	b0ae      	sub	sp, #184	@ 0xb8
 800155a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001568:	2300      	movs	r3, #0
 800156a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800156e:	2300      	movs	r3, #0
 8001570:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800157a:	4bcb      	ldr	r3, [pc, #812]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x354>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
 8001582:	2b0c      	cmp	r3, #12
 8001584:	f200 8206 	bhi.w	8001994 <HAL_RCC_GetSysClockFreq+0x440>
 8001588:	a201      	add	r2, pc, #4	@ (adr r2, 8001590 <HAL_RCC_GetSysClockFreq+0x3c>)
 800158a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158e:	bf00      	nop
 8001590:	080015c5 	.word	0x080015c5
 8001594:	08001995 	.word	0x08001995
 8001598:	08001995 	.word	0x08001995
 800159c:	08001995 	.word	0x08001995
 80015a0:	080015cd 	.word	0x080015cd
 80015a4:	08001995 	.word	0x08001995
 80015a8:	08001995 	.word	0x08001995
 80015ac:	08001995 	.word	0x08001995
 80015b0:	080015d5 	.word	0x080015d5
 80015b4:	08001995 	.word	0x08001995
 80015b8:	08001995 	.word	0x08001995
 80015bc:	08001995 	.word	0x08001995
 80015c0:	080017c5 	.word	0x080017c5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015c4:	4bb9      	ldr	r3, [pc, #740]	@ (80018ac <HAL_RCC_GetSysClockFreq+0x358>)
 80015c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015ca:	e1e7      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015cc:	4bb8      	ldr	r3, [pc, #736]	@ (80018b0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80015ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80015d2:	e1e3      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d4:	4bb4      	ldr	r3, [pc, #720]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e0:	4bb1      	ldr	r3, [pc, #708]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d071      	beq.n	80016d0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ec:	4bae      	ldr	r3, [pc, #696]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	099b      	lsrs	r3, r3, #6
 80015f2:	2200      	movs	r2, #0
 80015f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015f8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001604:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800160e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001612:	4622      	mov	r2, r4
 8001614:	462b      	mov	r3, r5
 8001616:	f04f 0000 	mov.w	r0, #0
 800161a:	f04f 0100 	mov.w	r1, #0
 800161e:	0159      	lsls	r1, r3, #5
 8001620:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001624:	0150      	lsls	r0, r2, #5
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4621      	mov	r1, r4
 800162c:	1a51      	subs	r1, r2, r1
 800162e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001630:	4629      	mov	r1, r5
 8001632:	eb63 0301 	sbc.w	r3, r3, r1
 8001636:	647b      	str	r3, [r7, #68]	@ 0x44
 8001638:	f04f 0200 	mov.w	r2, #0
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001644:	4649      	mov	r1, r9
 8001646:	018b      	lsls	r3, r1, #6
 8001648:	4641      	mov	r1, r8
 800164a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800164e:	4641      	mov	r1, r8
 8001650:	018a      	lsls	r2, r1, #6
 8001652:	4641      	mov	r1, r8
 8001654:	1a51      	subs	r1, r2, r1
 8001656:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001658:	4649      	mov	r1, r9
 800165a:	eb63 0301 	sbc.w	r3, r3, r1
 800165e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800166c:	4649      	mov	r1, r9
 800166e:	00cb      	lsls	r3, r1, #3
 8001670:	4641      	mov	r1, r8
 8001672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001676:	4641      	mov	r1, r8
 8001678:	00ca      	lsls	r2, r1, #3
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	4603      	mov	r3, r0
 8001680:	4622      	mov	r2, r4
 8001682:	189b      	adds	r3, r3, r2
 8001684:	633b      	str	r3, [r7, #48]	@ 0x30
 8001686:	462b      	mov	r3, r5
 8001688:	460a      	mov	r2, r1
 800168a:	eb42 0303 	adc.w	r3, r2, r3
 800168e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800169c:	4629      	mov	r1, r5
 800169e:	024b      	lsls	r3, r1, #9
 80016a0:	4621      	mov	r1, r4
 80016a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016a6:	4621      	mov	r1, r4
 80016a8:	024a      	lsls	r2, r1, #9
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016b2:	2200      	movs	r2, #0
 80016b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016bc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80016c0:	f7fe fda0 	bl	8000204 <__aeabi_uldivmod>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4613      	mov	r3, r2
 80016ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80016ce:	e067      	b.n	80017a0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016d0:	4b75      	ldr	r3, [pc, #468]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	099b      	lsrs	r3, r3, #6
 80016d6:	2200      	movs	r2, #0
 80016d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016dc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016ea:	2300      	movs	r3, #0
 80016ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016ee:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016f2:	4622      	mov	r2, r4
 80016f4:	462b      	mov	r3, r5
 80016f6:	f04f 0000 	mov.w	r0, #0
 80016fa:	f04f 0100 	mov.w	r1, #0
 80016fe:	0159      	lsls	r1, r3, #5
 8001700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001704:	0150      	lsls	r0, r2, #5
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4621      	mov	r1, r4
 800170c:	1a51      	subs	r1, r2, r1
 800170e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001710:	4629      	mov	r1, r5
 8001712:	eb63 0301 	sbc.w	r3, r3, r1
 8001716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	f04f 0300 	mov.w	r3, #0
 8001720:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001724:	4649      	mov	r1, r9
 8001726:	018b      	lsls	r3, r1, #6
 8001728:	4641      	mov	r1, r8
 800172a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800172e:	4641      	mov	r1, r8
 8001730:	018a      	lsls	r2, r1, #6
 8001732:	4641      	mov	r1, r8
 8001734:	ebb2 0a01 	subs.w	sl, r2, r1
 8001738:	4649      	mov	r1, r9
 800173a:	eb63 0b01 	sbc.w	fp, r3, r1
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	f04f 0300 	mov.w	r3, #0
 8001746:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800174a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800174e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001752:	4692      	mov	sl, r2
 8001754:	469b      	mov	fp, r3
 8001756:	4623      	mov	r3, r4
 8001758:	eb1a 0303 	adds.w	r3, sl, r3
 800175c:	623b      	str	r3, [r7, #32]
 800175e:	462b      	mov	r3, r5
 8001760:	eb4b 0303 	adc.w	r3, fp, r3
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	f04f 0300 	mov.w	r3, #0
 800176e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001772:	4629      	mov	r1, r5
 8001774:	028b      	lsls	r3, r1, #10
 8001776:	4621      	mov	r1, r4
 8001778:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800177c:	4621      	mov	r1, r4
 800177e:	028a      	lsls	r2, r1, #10
 8001780:	4610      	mov	r0, r2
 8001782:	4619      	mov	r1, r3
 8001784:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001788:	2200      	movs	r2, #0
 800178a:	673b      	str	r3, [r7, #112]	@ 0x70
 800178c:	677a      	str	r2, [r7, #116]	@ 0x74
 800178e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001792:	f7fe fd37 	bl	8000204 <__aeabi_uldivmod>
 8001796:	4602      	mov	r2, r0
 8001798:	460b      	mov	r3, r1
 800179a:	4613      	mov	r3, r2
 800179c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017a0:	4b41      	ldr	r3, [pc, #260]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	0c1b      	lsrs	r3, r3, #16
 80017a6:	f003 0303 	and.w	r3, r3, #3
 80017aa:	3301      	adds	r3, #1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80017b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80017b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80017be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017c2:	e0eb      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c4:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d0:	4b35      	ldr	r3, [pc, #212]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d06b      	beq.n	80018b4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017dc:	4b32      	ldr	r3, [pc, #200]	@ (80018a8 <HAL_RCC_GetSysClockFreq+0x354>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	099b      	lsrs	r3, r3, #6
 80017e2:	2200      	movs	r2, #0
 80017e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80017f0:	2300      	movs	r3, #0
 80017f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80017f4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017f8:	4622      	mov	r2, r4
 80017fa:	462b      	mov	r3, r5
 80017fc:	f04f 0000 	mov.w	r0, #0
 8001800:	f04f 0100 	mov.w	r1, #0
 8001804:	0159      	lsls	r1, r3, #5
 8001806:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800180a:	0150      	lsls	r0, r2, #5
 800180c:	4602      	mov	r2, r0
 800180e:	460b      	mov	r3, r1
 8001810:	4621      	mov	r1, r4
 8001812:	1a51      	subs	r1, r2, r1
 8001814:	61b9      	str	r1, [r7, #24]
 8001816:	4629      	mov	r1, r5
 8001818:	eb63 0301 	sbc.w	r3, r3, r1
 800181c:	61fb      	str	r3, [r7, #28]
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800182a:	4659      	mov	r1, fp
 800182c:	018b      	lsls	r3, r1, #6
 800182e:	4651      	mov	r1, sl
 8001830:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001834:	4651      	mov	r1, sl
 8001836:	018a      	lsls	r2, r1, #6
 8001838:	4651      	mov	r1, sl
 800183a:	ebb2 0801 	subs.w	r8, r2, r1
 800183e:	4659      	mov	r1, fp
 8001840:	eb63 0901 	sbc.w	r9, r3, r1
 8001844:	f04f 0200 	mov.w	r2, #0
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001850:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001854:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001858:	4690      	mov	r8, r2
 800185a:	4699      	mov	r9, r3
 800185c:	4623      	mov	r3, r4
 800185e:	eb18 0303 	adds.w	r3, r8, r3
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	462b      	mov	r3, r5
 8001866:	eb49 0303 	adc.w	r3, r9, r3
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	f04f 0300 	mov.w	r3, #0
 8001874:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001878:	4629      	mov	r1, r5
 800187a:	024b      	lsls	r3, r1, #9
 800187c:	4621      	mov	r1, r4
 800187e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001882:	4621      	mov	r1, r4
 8001884:	024a      	lsls	r2, r1, #9
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800188e:	2200      	movs	r2, #0
 8001890:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001892:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001894:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001898:	f7fe fcb4 	bl	8000204 <__aeabi_uldivmod>
 800189c:	4602      	mov	r2, r0
 800189e:	460b      	mov	r3, r1
 80018a0:	4613      	mov	r3, r2
 80018a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018a6:	e065      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0x420>
 80018a8:	40023800 	.word	0x40023800
 80018ac:	00f42400 	.word	0x00f42400
 80018b0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018b4:	4b3d      	ldr	r3, [pc, #244]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x458>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	099b      	lsrs	r3, r3, #6
 80018ba:	2200      	movs	r2, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	4611      	mov	r1, r2
 80018c0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80018c6:	2300      	movs	r3, #0
 80018c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80018ca:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80018ce:	4642      	mov	r2, r8
 80018d0:	464b      	mov	r3, r9
 80018d2:	f04f 0000 	mov.w	r0, #0
 80018d6:	f04f 0100 	mov.w	r1, #0
 80018da:	0159      	lsls	r1, r3, #5
 80018dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018e0:	0150      	lsls	r0, r2, #5
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4641      	mov	r1, r8
 80018e8:	1a51      	subs	r1, r2, r1
 80018ea:	60b9      	str	r1, [r7, #8]
 80018ec:	4649      	mov	r1, r9
 80018ee:	eb63 0301 	sbc.w	r3, r3, r1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	f04f 0300 	mov.w	r3, #0
 80018fc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001900:	4659      	mov	r1, fp
 8001902:	018b      	lsls	r3, r1, #6
 8001904:	4651      	mov	r1, sl
 8001906:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800190a:	4651      	mov	r1, sl
 800190c:	018a      	lsls	r2, r1, #6
 800190e:	4651      	mov	r1, sl
 8001910:	1a54      	subs	r4, r2, r1
 8001912:	4659      	mov	r1, fp
 8001914:	eb63 0501 	sbc.w	r5, r3, r1
 8001918:	f04f 0200 	mov.w	r2, #0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	00eb      	lsls	r3, r5, #3
 8001922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001926:	00e2      	lsls	r2, r4, #3
 8001928:	4614      	mov	r4, r2
 800192a:	461d      	mov	r5, r3
 800192c:	4643      	mov	r3, r8
 800192e:	18e3      	adds	r3, r4, r3
 8001930:	603b      	str	r3, [r7, #0]
 8001932:	464b      	mov	r3, r9
 8001934:	eb45 0303 	adc.w	r3, r5, r3
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001946:	4629      	mov	r1, r5
 8001948:	028b      	lsls	r3, r1, #10
 800194a:	4621      	mov	r1, r4
 800194c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001950:	4621      	mov	r1, r4
 8001952:	028a      	lsls	r2, r1, #10
 8001954:	4610      	mov	r0, r2
 8001956:	4619      	mov	r1, r3
 8001958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800195c:	2200      	movs	r2, #0
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001960:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001962:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001966:	f7fe fc4d 	bl	8000204 <__aeabi_uldivmod>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4613      	mov	r3, r2
 8001970:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001974:	4b0d      	ldr	r3, [pc, #52]	@ (80019ac <HAL_RCC_GetSysClockFreq+0x458>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	0f1b      	lsrs	r3, r3, #28
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001986:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001992:	e003      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001994:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001996:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800199a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800199c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	37b8      	adds	r7, #184	@ 0xb8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	00f42400 	.word	0x00f42400

080019b4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e28d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f000 8083 	beq.w	8001ada <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80019d4:	4b94      	ldr	r3, [pc, #592]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f003 030c 	and.w	r3, r3, #12
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d019      	beq.n	8001a14 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019e0:	4b91      	ldr	r3, [pc, #580]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
        || \
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d106      	bne.n	80019fa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019f8:	d00c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fa:	4b8b      	ldr	r3, [pc, #556]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d112      	bne.n	8001a2c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a06:	4b88      	ldr	r3, [pc, #544]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a12:	d10b      	bne.n	8001a2c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a14:	4b84      	ldr	r3, [pc, #528]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d05b      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x124>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d157      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e25a      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a34:	d106      	bne.n	8001a44 <HAL_RCC_OscConfig+0x90>
 8001a36:	4b7c      	ldr	r3, [pc, #496]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7b      	ldr	r2, [pc, #492]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e01d      	b.n	8001a80 <HAL_RCC_OscConfig+0xcc>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a4c:	d10c      	bne.n	8001a68 <HAL_RCC_OscConfig+0xb4>
 8001a4e:	4b76      	ldr	r3, [pc, #472]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a75      	ldr	r2, [pc, #468]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a58:	6013      	str	r3, [r2, #0]
 8001a5a:	4b73      	ldr	r3, [pc, #460]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a72      	ldr	r2, [pc, #456]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a64:	6013      	str	r3, [r2, #0]
 8001a66:	e00b      	b.n	8001a80 <HAL_RCC_OscConfig+0xcc>
 8001a68:	4b6f      	ldr	r3, [pc, #444]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6e      	ldr	r2, [pc, #440]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b6c      	ldr	r3, [pc, #432]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a6b      	ldr	r2, [pc, #428]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d013      	beq.n	8001ab0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a88:	f7ff f9aa 	bl	8000de0 <HAL_GetTick>
 8001a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	e008      	b.n	8001aa2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a90:	f7ff f9a6 	bl	8000de0 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b64      	cmp	r3, #100	@ 0x64
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e21f      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d0f0      	beq.n	8001a90 <HAL_RCC_OscConfig+0xdc>
 8001aae:	e014      	b.n	8001ada <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff f996 	bl	8000de0 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab8:	f7ff f992 	bl	8000de0 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b64      	cmp	r3, #100	@ 0x64
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e20b      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	4b57      	ldr	r3, [pc, #348]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x104>
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d06f      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001ae6:	4b50      	ldr	r3, [pc, #320]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	f003 030c 	and.w	r3, r3, #12
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d017      	beq.n	8001b22 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001af2:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001afa:	2b08      	cmp	r3, #8
 8001afc:	d105      	bne.n	8001b0a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001afe:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00b      	beq.n	8001b22 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b0a:	4b47      	ldr	r3, [pc, #284]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b12:	2b0c      	cmp	r3, #12
 8001b14:	d11c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b16:	4b44      	ldr	r3, [pc, #272]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d116      	bne.n	8001b50 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x186>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e1d3      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4937      	ldr	r1, [pc, #220]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	e03a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d020      	beq.n	8001b9a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b58:	4b34      	ldr	r3, [pc, #208]	@ (8001c2c <HAL_RCC_OscConfig+0x278>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b5e:	f7ff f93f 	bl	8000de0 <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b66:	f7ff f93b 	bl	8000de0 <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e1b4      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0f0      	beq.n	8001b66 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4925      	ldr	r1, [pc, #148]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	600b      	str	r3, [r1, #0]
 8001b98:	e015      	b.n	8001bc6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b9a:	4b24      	ldr	r3, [pc, #144]	@ (8001c2c <HAL_RCC_OscConfig+0x278>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba0:	f7ff f91e 	bl	8000de0 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	e008      	b.n	8001bba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba8:	f7ff f91a 	bl	8000de0 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e193      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bba:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f0      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d036      	beq.n	8001c40 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d016      	beq.n	8001c08 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bda:	4b15      	ldr	r3, [pc, #84]	@ (8001c30 <HAL_RCC_OscConfig+0x27c>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff f8fe 	bl	8000de0 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff f8fa 	bl	8000de0 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e173      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001c28 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x234>
 8001c06:	e01b      	b.n	8001c40 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c08:	4b09      	ldr	r3, [pc, #36]	@ (8001c30 <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7ff f8e7 	bl	8000de0 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c14:	e00e      	b.n	8001c34 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c16:	f7ff f8e3 	bl	8000de0 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d907      	bls.n	8001c34 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e15c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	42470000 	.word	0x42470000
 8001c30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c34:	4b8a      	ldr	r3, [pc, #552]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001c36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1ea      	bne.n	8001c16 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f000 8097 	beq.w	8001d7c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c52:	4b83      	ldr	r3, [pc, #524]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10f      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	4b7f      	ldr	r3, [pc, #508]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	4a7e      	ldr	r2, [pc, #504]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c6e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b79      	ldr	r3, [pc, #484]	@ (8001e64 <HAL_RCC_OscConfig+0x4b0>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8a:	4b76      	ldr	r3, [pc, #472]	@ (8001e64 <HAL_RCC_OscConfig+0x4b0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a75      	ldr	r2, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0x4b0>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c96:	f7ff f8a3 	bl	8000de0 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7ff f89f 	bl	8000de0 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e118      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e64 <HAL_RCC_OscConfig+0x4b0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x31e>
 8001cc4:	4b66      	ldr	r3, [pc, #408]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc8:	4a65      	ldr	r2, [pc, #404]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd0:	e01c      	b.n	8001d0c <HAL_RCC_OscConfig+0x358>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x340>
 8001cda:	4b61      	ldr	r3, [pc, #388]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cde:	4a60      	ldr	r2, [pc, #384]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ce6:	4b5e      	ldr	r3, [pc, #376]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cea:	4a5d      	ldr	r2, [pc, #372]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0x358>
 8001cf4:	4b5a      	ldr	r3, [pc, #360]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf8:	4a59      	ldr	r2, [pc, #356]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d00:	4b57      	ldr	r3, [pc, #348]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d04:	4a56      	ldr	r2, [pc, #344]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001d06:	f023 0304 	bic.w	r3, r3, #4
 8001d0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d015      	beq.n	8001d40 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f864 	bl	8000de0 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f860 	bl	8000de0 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e0d7      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d32:	4b4b      	ldr	r3, [pc, #300]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ee      	beq.n	8001d1c <HAL_RCC_OscConfig+0x368>
 8001d3e:	e014      	b.n	8001d6a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff f84e 	bl	8000de0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7ff f84a 	bl	8000de0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e0c1      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d5e:	4b40      	ldr	r3, [pc, #256]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1ee      	bne.n	8001d48 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d6a:	7dfb      	ldrb	r3, [r7, #23]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d105      	bne.n	8001d7c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d70:	4b3b      	ldr	r3, [pc, #236]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d74:	4a3a      	ldr	r2, [pc, #232]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80ad 	beq.w	8001ee0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d86:	4b36      	ldr	r3, [pc, #216]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d060      	beq.n	8001e54 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d145      	bne.n	8001e26 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b33      	ldr	r3, [pc, #204]	@ (8001e68 <HAL_RCC_OscConfig+0x4b4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff f81e 	bl	8000de0 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7ff f81a 	bl	8000de0 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e093      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dba:	4b29      	ldr	r3, [pc, #164]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69da      	ldr	r2, [r3, #28]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dd4:	019b      	lsls	r3, r3, #6
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	3b01      	subs	r3, #1
 8001de0:	041b      	lsls	r3, r3, #16
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df0:	071b      	lsls	r3, r3, #28
 8001df2:	491b      	ldr	r1, [pc, #108]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001df8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e68 <HAL_RCC_OscConfig+0x4b4>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7fe ffef 	bl	8000de0 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7fe ffeb 	bl	8000de0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e064      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x452>
 8001e24:	e05c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <HAL_RCC_OscConfig+0x4b4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7fe ffd8 	bl	8000de0 <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e34:	f7fe ffd4 	bl	8000de0 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e04d      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e46:	4b06      	ldr	r3, [pc, #24]	@ (8001e60 <HAL_RCC_OscConfig+0x4ac>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x480>
 8001e52:	e045      	b.n	8001ee0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e040      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40007000 	.word	0x40007000
 8001e68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001eec <HAL_RCC_OscConfig+0x538>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d030      	beq.n	8001edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d129      	bne.n	8001edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d122      	bne.n	8001edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ea2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d119      	bne.n	8001edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb2:	085b      	lsrs	r3, r3, #1
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d10f      	bne.n	8001edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d107      	bne.n	8001edc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800

08001ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e042      	b.n	8001f88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7fe fe48 	bl	8000bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2224      	movs	r2, #36	@ 0x24
 8001f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f82b 	bl	8001f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68da      	ldr	r2, [r3, #12]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2220      	movs	r2, #32
 8001f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f94:	b0c0      	sub	sp, #256	@ 0x100
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fac:	68d9      	ldr	r1, [r3, #12]
 8001fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	ea40 0301 	orr.w	r3, r0, r1
 8001fb8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001fe8:	f021 010c 	bic.w	r1, r1, #12
 8001fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ff6:	430b      	orrs	r3, r1
 8001ff8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800200a:	6999      	ldr	r1, [r3, #24]
 800200c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	ea40 0301 	orr.w	r3, r0, r1
 8002016:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	4b8f      	ldr	r3, [pc, #572]	@ (800225c <UART_SetConfig+0x2cc>)
 8002020:	429a      	cmp	r2, r3
 8002022:	d005      	beq.n	8002030 <UART_SetConfig+0xa0>
 8002024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	4b8d      	ldr	r3, [pc, #564]	@ (8002260 <UART_SetConfig+0x2d0>)
 800202c:	429a      	cmp	r2, r3
 800202e:	d104      	bne.n	800203a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002030:	f7ff fa7c 	bl	800152c <HAL_RCC_GetPCLK2Freq>
 8002034:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002038:	e003      	b.n	8002042 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800203a:	f7ff fa63 	bl	8001504 <HAL_RCC_GetPCLK1Freq>
 800203e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800204c:	f040 810c 	bne.w	8002268 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002054:	2200      	movs	r2, #0
 8002056:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800205a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800205e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002062:	4622      	mov	r2, r4
 8002064:	462b      	mov	r3, r5
 8002066:	1891      	adds	r1, r2, r2
 8002068:	65b9      	str	r1, [r7, #88]	@ 0x58
 800206a:	415b      	adcs	r3, r3
 800206c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800206e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002072:	4621      	mov	r1, r4
 8002074:	eb12 0801 	adds.w	r8, r2, r1
 8002078:	4629      	mov	r1, r5
 800207a:	eb43 0901 	adc.w	r9, r3, r1
 800207e:	f04f 0200 	mov.w	r2, #0
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800208a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800208e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002092:	4690      	mov	r8, r2
 8002094:	4699      	mov	r9, r3
 8002096:	4623      	mov	r3, r4
 8002098:	eb18 0303 	adds.w	r3, r8, r3
 800209c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80020a0:	462b      	mov	r3, r5
 80020a2:	eb49 0303 	adc.w	r3, r9, r3
 80020a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80020aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80020b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80020ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80020be:	460b      	mov	r3, r1
 80020c0:	18db      	adds	r3, r3, r3
 80020c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80020c4:	4613      	mov	r3, r2
 80020c6:	eb42 0303 	adc.w	r3, r2, r3
 80020ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80020cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80020d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80020d4:	f7fe f896 	bl	8000204 <__aeabi_uldivmod>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4b61      	ldr	r3, [pc, #388]	@ (8002264 <UART_SetConfig+0x2d4>)
 80020de:	fba3 2302 	umull	r2, r3, r3, r2
 80020e2:	095b      	lsrs	r3, r3, #5
 80020e4:	011c      	lsls	r4, r3, #4
 80020e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80020f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80020f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80020f8:	4642      	mov	r2, r8
 80020fa:	464b      	mov	r3, r9
 80020fc:	1891      	adds	r1, r2, r2
 80020fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002100:	415b      	adcs	r3, r3
 8002102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002104:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002108:	4641      	mov	r1, r8
 800210a:	eb12 0a01 	adds.w	sl, r2, r1
 800210e:	4649      	mov	r1, r9
 8002110:	eb43 0b01 	adc.w	fp, r3, r1
 8002114:	f04f 0200 	mov.w	r2, #0
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002120:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002124:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002128:	4692      	mov	sl, r2
 800212a:	469b      	mov	fp, r3
 800212c:	4643      	mov	r3, r8
 800212e:	eb1a 0303 	adds.w	r3, sl, r3
 8002132:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002136:	464b      	mov	r3, r9
 8002138:	eb4b 0303 	adc.w	r3, fp, r3
 800213c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800214c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002150:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002154:	460b      	mov	r3, r1
 8002156:	18db      	adds	r3, r3, r3
 8002158:	643b      	str	r3, [r7, #64]	@ 0x40
 800215a:	4613      	mov	r3, r2
 800215c:	eb42 0303 	adc.w	r3, r2, r3
 8002160:	647b      	str	r3, [r7, #68]	@ 0x44
 8002162:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002166:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800216a:	f7fe f84b 	bl	8000204 <__aeabi_uldivmod>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4611      	mov	r1, r2
 8002174:	4b3b      	ldr	r3, [pc, #236]	@ (8002264 <UART_SetConfig+0x2d4>)
 8002176:	fba3 2301 	umull	r2, r3, r3, r1
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2264      	movs	r2, #100	@ 0x64
 800217e:	fb02 f303 	mul.w	r3, r2, r3
 8002182:	1acb      	subs	r3, r1, r3
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800218a:	4b36      	ldr	r3, [pc, #216]	@ (8002264 <UART_SetConfig+0x2d4>)
 800218c:	fba3 2302 	umull	r2, r3, r3, r2
 8002190:	095b      	lsrs	r3, r3, #5
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002198:	441c      	add	r4, r3
 800219a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800219e:	2200      	movs	r2, #0
 80021a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80021ac:	4642      	mov	r2, r8
 80021ae:	464b      	mov	r3, r9
 80021b0:	1891      	adds	r1, r2, r2
 80021b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80021b4:	415b      	adcs	r3, r3
 80021b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80021bc:	4641      	mov	r1, r8
 80021be:	1851      	adds	r1, r2, r1
 80021c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80021c2:	4649      	mov	r1, r9
 80021c4:	414b      	adcs	r3, r1
 80021c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021c8:	f04f 0200 	mov.w	r2, #0
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80021d4:	4659      	mov	r1, fp
 80021d6:	00cb      	lsls	r3, r1, #3
 80021d8:	4651      	mov	r1, sl
 80021da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021de:	4651      	mov	r1, sl
 80021e0:	00ca      	lsls	r2, r1, #3
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	4642      	mov	r2, r8
 80021ea:	189b      	adds	r3, r3, r2
 80021ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021f0:	464b      	mov	r3, r9
 80021f2:	460a      	mov	r2, r1
 80021f4:	eb42 0303 	adc.w	r3, r2, r3
 80021f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002208:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800220c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002210:	460b      	mov	r3, r1
 8002212:	18db      	adds	r3, r3, r3
 8002214:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002216:	4613      	mov	r3, r2
 8002218:	eb42 0303 	adc.w	r3, r2, r3
 800221c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800221e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002222:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002226:	f7fd ffed 	bl	8000204 <__aeabi_uldivmod>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <UART_SetConfig+0x2d4>)
 8002230:	fba3 1302 	umull	r1, r3, r3, r2
 8002234:	095b      	lsrs	r3, r3, #5
 8002236:	2164      	movs	r1, #100	@ 0x64
 8002238:	fb01 f303 	mul.w	r3, r1, r3
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	3332      	adds	r3, #50	@ 0x32
 8002242:	4a08      	ldr	r2, [pc, #32]	@ (8002264 <UART_SetConfig+0x2d4>)
 8002244:	fba2 2303 	umull	r2, r3, r2, r3
 8002248:	095b      	lsrs	r3, r3, #5
 800224a:	f003 0207 	and.w	r2, r3, #7
 800224e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4422      	add	r2, r4
 8002256:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002258:	e106      	b.n	8002468 <UART_SetConfig+0x4d8>
 800225a:	bf00      	nop
 800225c:	40011000 	.word	0x40011000
 8002260:	40011400 	.word	0x40011400
 8002264:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800226c:	2200      	movs	r2, #0
 800226e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002272:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002276:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800227a:	4642      	mov	r2, r8
 800227c:	464b      	mov	r3, r9
 800227e:	1891      	adds	r1, r2, r2
 8002280:	6239      	str	r1, [r7, #32]
 8002282:	415b      	adcs	r3, r3
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
 8002286:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800228a:	4641      	mov	r1, r8
 800228c:	1854      	adds	r4, r2, r1
 800228e:	4649      	mov	r1, r9
 8002290:	eb43 0501 	adc.w	r5, r3, r1
 8002294:	f04f 0200 	mov.w	r2, #0
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	00eb      	lsls	r3, r5, #3
 800229e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022a2:	00e2      	lsls	r2, r4, #3
 80022a4:	4614      	mov	r4, r2
 80022a6:	461d      	mov	r5, r3
 80022a8:	4643      	mov	r3, r8
 80022aa:	18e3      	adds	r3, r4, r3
 80022ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80022b0:	464b      	mov	r3, r9
 80022b2:	eb45 0303 	adc.w	r3, r5, r3
 80022b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80022ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80022c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80022d6:	4629      	mov	r1, r5
 80022d8:	008b      	lsls	r3, r1, #2
 80022da:	4621      	mov	r1, r4
 80022dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022e0:	4621      	mov	r1, r4
 80022e2:	008a      	lsls	r2, r1, #2
 80022e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80022e8:	f7fd ff8c 	bl	8000204 <__aeabi_uldivmod>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4b60      	ldr	r3, [pc, #384]	@ (8002474 <UART_SetConfig+0x4e4>)
 80022f2:	fba3 2302 	umull	r2, r3, r3, r2
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	011c      	lsls	r4, r3, #4
 80022fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022fe:	2200      	movs	r2, #0
 8002300:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002304:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002308:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800230c:	4642      	mov	r2, r8
 800230e:	464b      	mov	r3, r9
 8002310:	1891      	adds	r1, r2, r2
 8002312:	61b9      	str	r1, [r7, #24]
 8002314:	415b      	adcs	r3, r3
 8002316:	61fb      	str	r3, [r7, #28]
 8002318:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800231c:	4641      	mov	r1, r8
 800231e:	1851      	adds	r1, r2, r1
 8002320:	6139      	str	r1, [r7, #16]
 8002322:	4649      	mov	r1, r9
 8002324:	414b      	adcs	r3, r1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	f04f 0200 	mov.w	r2, #0
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002334:	4659      	mov	r1, fp
 8002336:	00cb      	lsls	r3, r1, #3
 8002338:	4651      	mov	r1, sl
 800233a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800233e:	4651      	mov	r1, sl
 8002340:	00ca      	lsls	r2, r1, #3
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	4603      	mov	r3, r0
 8002348:	4642      	mov	r2, r8
 800234a:	189b      	adds	r3, r3, r2
 800234c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002350:	464b      	mov	r3, r9
 8002352:	460a      	mov	r2, r1
 8002354:	eb42 0303 	adc.w	r3, r2, r3
 8002358:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002366:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002374:	4649      	mov	r1, r9
 8002376:	008b      	lsls	r3, r1, #2
 8002378:	4641      	mov	r1, r8
 800237a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800237e:	4641      	mov	r1, r8
 8002380:	008a      	lsls	r2, r1, #2
 8002382:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002386:	f7fd ff3d 	bl	8000204 <__aeabi_uldivmod>
 800238a:	4602      	mov	r2, r0
 800238c:	460b      	mov	r3, r1
 800238e:	4611      	mov	r1, r2
 8002390:	4b38      	ldr	r3, [pc, #224]	@ (8002474 <UART_SetConfig+0x4e4>)
 8002392:	fba3 2301 	umull	r2, r3, r3, r1
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2264      	movs	r2, #100	@ 0x64
 800239a:	fb02 f303 	mul.w	r3, r2, r3
 800239e:	1acb      	subs	r3, r1, r3
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	3332      	adds	r3, #50	@ 0x32
 80023a4:	4a33      	ldr	r2, [pc, #204]	@ (8002474 <UART_SetConfig+0x4e4>)
 80023a6:	fba2 2303 	umull	r2, r3, r2, r3
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80023b0:	441c      	add	r4, r3
 80023b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023b6:	2200      	movs	r2, #0
 80023b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80023ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80023bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80023c0:	4642      	mov	r2, r8
 80023c2:	464b      	mov	r3, r9
 80023c4:	1891      	adds	r1, r2, r2
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	415b      	adcs	r3, r3
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023d0:	4641      	mov	r1, r8
 80023d2:	1851      	adds	r1, r2, r1
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	4649      	mov	r1, r9
 80023d8:	414b      	adcs	r3, r1
 80023da:	607b      	str	r3, [r7, #4]
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	f04f 0300 	mov.w	r3, #0
 80023e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80023e8:	4659      	mov	r1, fp
 80023ea:	00cb      	lsls	r3, r1, #3
 80023ec:	4651      	mov	r1, sl
 80023ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023f2:	4651      	mov	r1, sl
 80023f4:	00ca      	lsls	r2, r1, #3
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	4603      	mov	r3, r0
 80023fc:	4642      	mov	r2, r8
 80023fe:	189b      	adds	r3, r3, r2
 8002400:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002402:	464b      	mov	r3, r9
 8002404:	460a      	mov	r2, r1
 8002406:	eb42 0303 	adc.w	r3, r2, r3
 800240a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800240c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	663b      	str	r3, [r7, #96]	@ 0x60
 8002416:	667a      	str	r2, [r7, #100]	@ 0x64
 8002418:	f04f 0200 	mov.w	r2, #0
 800241c:	f04f 0300 	mov.w	r3, #0
 8002420:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002424:	4649      	mov	r1, r9
 8002426:	008b      	lsls	r3, r1, #2
 8002428:	4641      	mov	r1, r8
 800242a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800242e:	4641      	mov	r1, r8
 8002430:	008a      	lsls	r2, r1, #2
 8002432:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002436:	f7fd fee5 	bl	8000204 <__aeabi_uldivmod>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <UART_SetConfig+0x4e4>)
 8002440:	fba3 1302 	umull	r1, r3, r3, r2
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	2164      	movs	r1, #100	@ 0x64
 8002448:	fb01 f303 	mul.w	r3, r1, r3
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	3332      	adds	r3, #50	@ 0x32
 8002452:	4a08      	ldr	r2, [pc, #32]	@ (8002474 <UART_SetConfig+0x4e4>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	f003 020f 	and.w	r2, r3, #15
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4422      	add	r2, r4
 8002466:	609a      	str	r2, [r3, #8]
}
 8002468:	bf00      	nop
 800246a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800246e:	46bd      	mov	sp, r7
 8002470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002474:	51eb851f 	.word	0x51eb851f

08002478 <memset>:
 8002478:	4402      	add	r2, r0
 800247a:	4603      	mov	r3, r0
 800247c:	4293      	cmp	r3, r2
 800247e:	d100      	bne.n	8002482 <memset+0xa>
 8002480:	4770      	bx	lr
 8002482:	f803 1b01 	strb.w	r1, [r3], #1
 8002486:	e7f9      	b.n	800247c <memset+0x4>

08002488 <__errno>:
 8002488:	4b01      	ldr	r3, [pc, #4]	@ (8002490 <__errno+0x8>)
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	2000000c 	.word	0x2000000c

08002494 <__libc_init_array>:
 8002494:	b570      	push	{r4, r5, r6, lr}
 8002496:	4d0d      	ldr	r5, [pc, #52]	@ (80024cc <__libc_init_array+0x38>)
 8002498:	4c0d      	ldr	r4, [pc, #52]	@ (80024d0 <__libc_init_array+0x3c>)
 800249a:	1b64      	subs	r4, r4, r5
 800249c:	10a4      	asrs	r4, r4, #2
 800249e:	2600      	movs	r6, #0
 80024a0:	42a6      	cmp	r6, r4
 80024a2:	d109      	bne.n	80024b8 <__libc_init_array+0x24>
 80024a4:	4d0b      	ldr	r5, [pc, #44]	@ (80024d4 <__libc_init_array+0x40>)
 80024a6:	4c0c      	ldr	r4, [pc, #48]	@ (80024d8 <__libc_init_array+0x44>)
 80024a8:	f000 fbe0 	bl	8002c6c <_init>
 80024ac:	1b64      	subs	r4, r4, r5
 80024ae:	10a4      	asrs	r4, r4, #2
 80024b0:	2600      	movs	r6, #0
 80024b2:	42a6      	cmp	r6, r4
 80024b4:	d105      	bne.n	80024c2 <__libc_init_array+0x2e>
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
 80024b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80024bc:	4798      	blx	r3
 80024be:	3601      	adds	r6, #1
 80024c0:	e7ee      	b.n	80024a0 <__libc_init_array+0xc>
 80024c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80024c6:	4798      	blx	r3
 80024c8:	3601      	adds	r6, #1
 80024ca:	e7f2      	b.n	80024b2 <__libc_init_array+0x1e>
 80024cc:	080077bc 	.word	0x080077bc
 80024d0:	080077bc 	.word	0x080077bc
 80024d4:	080077bc 	.word	0x080077bc
 80024d8:	080077c0 	.word	0x080077c0

080024dc <powf>:
 80024dc:	b508      	push	{r3, lr}
 80024de:	ed2d 8b04 	vpush	{d8-d9}
 80024e2:	eeb0 8a60 	vmov.f32	s16, s1
 80024e6:	eeb0 9a40 	vmov.f32	s18, s0
 80024ea:	f000 f859 	bl	80025a0 <__ieee754_powf>
 80024ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	eef0 8a40 	vmov.f32	s17, s0
 80024fa:	d63e      	bvs.n	800257a <powf+0x9e>
 80024fc:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8002500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002504:	d112      	bne.n	800252c <powf+0x50>
 8002506:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	d039      	beq.n	8002584 <powf+0xa8>
 8002510:	eeb0 0a48 	vmov.f32	s0, s16
 8002514:	f000 f839 	bl	800258a <finitef>
 8002518:	b378      	cbz	r0, 800257a <powf+0x9e>
 800251a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800251e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002522:	d52a      	bpl.n	800257a <powf+0x9e>
 8002524:	f7ff ffb0 	bl	8002488 <__errno>
 8002528:	2322      	movs	r3, #34	@ 0x22
 800252a:	e014      	b.n	8002556 <powf+0x7a>
 800252c:	f000 f82d 	bl	800258a <finitef>
 8002530:	b998      	cbnz	r0, 800255a <powf+0x7e>
 8002532:	eeb0 0a49 	vmov.f32	s0, s18
 8002536:	f000 f828 	bl	800258a <finitef>
 800253a:	b170      	cbz	r0, 800255a <powf+0x7e>
 800253c:	eeb0 0a48 	vmov.f32	s0, s16
 8002540:	f000 f823 	bl	800258a <finitef>
 8002544:	b148      	cbz	r0, 800255a <powf+0x7e>
 8002546:	eef4 8a68 	vcmp.f32	s17, s17
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d7e9      	bvc.n	8002524 <powf+0x48>
 8002550:	f7ff ff9a 	bl	8002488 <__errno>
 8002554:	2321      	movs	r3, #33	@ 0x21
 8002556:	6003      	str	r3, [r0, #0]
 8002558:	e00f      	b.n	800257a <powf+0x9e>
 800255a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800255e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002562:	d10a      	bne.n	800257a <powf+0x9e>
 8002564:	eeb0 0a49 	vmov.f32	s0, s18
 8002568:	f000 f80f 	bl	800258a <finitef>
 800256c:	b128      	cbz	r0, 800257a <powf+0x9e>
 800256e:	eeb0 0a48 	vmov.f32	s0, s16
 8002572:	f000 f80a 	bl	800258a <finitef>
 8002576:	2800      	cmp	r0, #0
 8002578:	d1d4      	bne.n	8002524 <powf+0x48>
 800257a:	eeb0 0a68 	vmov.f32	s0, s17
 800257e:	ecbd 8b04 	vpop	{d8-d9}
 8002582:	bd08      	pop	{r3, pc}
 8002584:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8002588:	e7f7      	b.n	800257a <powf+0x9e>

0800258a <finitef>:
 800258a:	ee10 3a10 	vmov	r3, s0
 800258e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8002592:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8002596:	bfac      	ite	ge
 8002598:	2000      	movge	r0, #0
 800259a:	2001      	movlt	r0, #1
 800259c:	4770      	bx	lr
	...

080025a0 <__ieee754_powf>:
 80025a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80025a4:	ee10 4a90 	vmov	r4, s1
 80025a8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80025ac:	ed2d 8b02 	vpush	{d8}
 80025b0:	ee10 6a10 	vmov	r6, s0
 80025b4:	eeb0 8a40 	vmov.f32	s16, s0
 80025b8:	eef0 8a60 	vmov.f32	s17, s1
 80025bc:	d10c      	bne.n	80025d8 <__ieee754_powf+0x38>
 80025be:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80025c2:	0076      	lsls	r6, r6, #1
 80025c4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80025c8:	f240 8274 	bls.w	8002ab4 <__ieee754_powf+0x514>
 80025cc:	ee38 0a28 	vadd.f32	s0, s16, s17
 80025d0:	ecbd 8b02 	vpop	{d8}
 80025d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80025d8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80025dc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80025e0:	d802      	bhi.n	80025e8 <__ieee754_powf+0x48>
 80025e2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80025e6:	d908      	bls.n	80025fa <__ieee754_powf+0x5a>
 80025e8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 80025ec:	d1ee      	bne.n	80025cc <__ieee754_powf+0x2c>
 80025ee:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80025f2:	0064      	lsls	r4, r4, #1
 80025f4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80025f8:	e7e6      	b.n	80025c8 <__ieee754_powf+0x28>
 80025fa:	2e00      	cmp	r6, #0
 80025fc:	da1f      	bge.n	800263e <__ieee754_powf+0x9e>
 80025fe:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8002602:	f080 8260 	bcs.w	8002ac6 <__ieee754_powf+0x526>
 8002606:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800260a:	d32f      	bcc.n	800266c <__ieee754_powf+0xcc>
 800260c:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8002610:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8002614:	fa49 f503 	asr.w	r5, r9, r3
 8002618:	fa05 f303 	lsl.w	r3, r5, r3
 800261c:	454b      	cmp	r3, r9
 800261e:	d123      	bne.n	8002668 <__ieee754_powf+0xc8>
 8002620:	f005 0501 	and.w	r5, r5, #1
 8002624:	f1c5 0502 	rsb	r5, r5, #2
 8002628:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800262c:	d11f      	bne.n	800266e <__ieee754_powf+0xce>
 800262e:	2c00      	cmp	r4, #0
 8002630:	f280 8246 	bge.w	8002ac0 <__ieee754_powf+0x520>
 8002634:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8002638:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800263c:	e7c8      	b.n	80025d0 <__ieee754_powf+0x30>
 800263e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8002642:	d111      	bne.n	8002668 <__ieee754_powf+0xc8>
 8002644:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8002648:	f000 8234 	beq.w	8002ab4 <__ieee754_powf+0x514>
 800264c:	d906      	bls.n	800265c <__ieee754_powf+0xbc>
 800264e:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8002964 <__ieee754_powf+0x3c4>
 8002652:	2c00      	cmp	r4, #0
 8002654:	bfa8      	it	ge
 8002656:	eeb0 0a68 	vmovge.f32	s0, s17
 800265a:	e7b9      	b.n	80025d0 <__ieee754_powf+0x30>
 800265c:	2c00      	cmp	r4, #0
 800265e:	f280 822c 	bge.w	8002aba <__ieee754_powf+0x51a>
 8002662:	eeb1 0a68 	vneg.f32	s0, s17
 8002666:	e7b3      	b.n	80025d0 <__ieee754_powf+0x30>
 8002668:	2500      	movs	r5, #0
 800266a:	e7dd      	b.n	8002628 <__ieee754_powf+0x88>
 800266c:	2500      	movs	r5, #0
 800266e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8002672:	d102      	bne.n	800267a <__ieee754_powf+0xda>
 8002674:	ee28 0a08 	vmul.f32	s0, s16, s16
 8002678:	e7aa      	b.n	80025d0 <__ieee754_powf+0x30>
 800267a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800267e:	f040 8227 	bne.w	8002ad0 <__ieee754_powf+0x530>
 8002682:	2e00      	cmp	r6, #0
 8002684:	f2c0 8224 	blt.w	8002ad0 <__ieee754_powf+0x530>
 8002688:	eeb0 0a48 	vmov.f32	s0, s16
 800268c:	ecbd 8b02 	vpop	{d8}
 8002690:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002694:	f000 bae6 	b.w	8002c64 <__ieee754_sqrtf>
 8002698:	2d01      	cmp	r5, #1
 800269a:	d199      	bne.n	80025d0 <__ieee754_powf+0x30>
 800269c:	eeb1 0a40 	vneg.f32	s0, s0
 80026a0:	e796      	b.n	80025d0 <__ieee754_powf+0x30>
 80026a2:	0ff0      	lsrs	r0, r6, #31
 80026a4:	3801      	subs	r0, #1
 80026a6:	ea55 0300 	orrs.w	r3, r5, r0
 80026aa:	d104      	bne.n	80026b6 <__ieee754_powf+0x116>
 80026ac:	ee38 8a48 	vsub.f32	s16, s16, s16
 80026b0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80026b4:	e78c      	b.n	80025d0 <__ieee754_powf+0x30>
 80026b6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80026ba:	d96d      	bls.n	8002798 <__ieee754_powf+0x1f8>
 80026bc:	4baa      	ldr	r3, [pc, #680]	@ (8002968 <__ieee754_powf+0x3c8>)
 80026be:	4598      	cmp	r8, r3
 80026c0:	d808      	bhi.n	80026d4 <__ieee754_powf+0x134>
 80026c2:	2c00      	cmp	r4, #0
 80026c4:	da0b      	bge.n	80026de <__ieee754_powf+0x13e>
 80026c6:	2000      	movs	r0, #0
 80026c8:	ecbd 8b02 	vpop	{d8}
 80026cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026d0:	f000 bac2 	b.w	8002c58 <__math_oflowf>
 80026d4:	4ba5      	ldr	r3, [pc, #660]	@ (800296c <__ieee754_powf+0x3cc>)
 80026d6:	4598      	cmp	r8, r3
 80026d8:	d908      	bls.n	80026ec <__ieee754_powf+0x14c>
 80026da:	2c00      	cmp	r4, #0
 80026dc:	dcf3      	bgt.n	80026c6 <__ieee754_powf+0x126>
 80026de:	2000      	movs	r0, #0
 80026e0:	ecbd 8b02 	vpop	{d8}
 80026e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80026e8:	f000 bab0 	b.w	8002c4c <__math_uflowf>
 80026ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80026f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80026f4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8002970 <__ieee754_powf+0x3d0>
 80026f8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80026fc:	eee0 6a67 	vfms.f32	s13, s0, s15
 8002700:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8002704:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8002708:	ee20 7a00 	vmul.f32	s14, s0, s0
 800270c:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8002974 <__ieee754_powf+0x3d4>
 8002710:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002714:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8002978 <__ieee754_powf+0x3d8>
 8002718:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800271c:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800297c <__ieee754_powf+0x3dc>
 8002720:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002724:	eeb0 7a67 	vmov.f32	s14, s15
 8002728:	eea0 7a26 	vfma.f32	s14, s0, s13
 800272c:	ee17 3a10 	vmov	r3, s14
 8002730:	f36f 030b 	bfc	r3, #0, #12
 8002734:	ee07 3a10 	vmov	s14, r3
 8002738:	eeb0 6a47 	vmov.f32	s12, s14
 800273c:	eea0 6a66 	vfms.f32	s12, s0, s13
 8002740:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8002744:	3d01      	subs	r5, #1
 8002746:	4305      	orrs	r5, r0
 8002748:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800274c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8002750:	f36f 040b 	bfc	r4, #0, #12
 8002754:	bf18      	it	ne
 8002756:	eeb0 8a66 	vmovne.f32	s16, s13
 800275a:	ee06 4a90 	vmov	s13, r4
 800275e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8002762:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8002766:	ee67 7a26 	vmul.f32	s15, s14, s13
 800276a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800276e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8002772:	ee17 1a10 	vmov	r1, s14
 8002776:	2900      	cmp	r1, #0
 8002778:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800277c:	f340 80dd 	ble.w	800293a <__ieee754_powf+0x39a>
 8002780:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8002784:	f240 80ca 	bls.w	800291c <__ieee754_powf+0x37c>
 8002788:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800278c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002790:	bf4c      	ite	mi
 8002792:	2001      	movmi	r0, #1
 8002794:	2000      	movpl	r0, #0
 8002796:	e797      	b.n	80026c8 <__ieee754_powf+0x128>
 8002798:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800279c:	bf01      	itttt	eq
 800279e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8002980 <__ieee754_powf+0x3e0>
 80027a2:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80027a6:	f06f 0317 	mvneq.w	r3, #23
 80027aa:	ee17 7a90 	vmoveq	r7, s15
 80027ae:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80027b2:	bf18      	it	ne
 80027b4:	2300      	movne	r3, #0
 80027b6:	3a7f      	subs	r2, #127	@ 0x7f
 80027b8:	441a      	add	r2, r3
 80027ba:	4b72      	ldr	r3, [pc, #456]	@ (8002984 <__ieee754_powf+0x3e4>)
 80027bc:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80027c0:	429f      	cmp	r7, r3
 80027c2:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80027c6:	dd06      	ble.n	80027d6 <__ieee754_powf+0x236>
 80027c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002988 <__ieee754_powf+0x3e8>)
 80027ca:	429f      	cmp	r7, r3
 80027cc:	f340 80a4 	ble.w	8002918 <__ieee754_powf+0x378>
 80027d0:	3201      	adds	r2, #1
 80027d2:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80027d6:	2600      	movs	r6, #0
 80027d8:	4b6c      	ldr	r3, [pc, #432]	@ (800298c <__ieee754_powf+0x3ec>)
 80027da:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80027de:	ee07 1a10 	vmov	s14, r1
 80027e2:	edd3 5a00 	vldr	s11, [r3]
 80027e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002990 <__ieee754_powf+0x3f0>)
 80027e8:	ee75 7a87 	vadd.f32	s15, s11, s14
 80027ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027f0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80027f4:	1049      	asrs	r1, r1, #1
 80027f6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80027fa:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80027fe:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8002802:	ee37 6a65 	vsub.f32	s12, s14, s11
 8002806:	ee07 1a90 	vmov	s15, r1
 800280a:	ee26 5a24 	vmul.f32	s10, s12, s9
 800280e:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8002812:	ee15 7a10 	vmov	r7, s10
 8002816:	401f      	ands	r7, r3
 8002818:	ee06 7a90 	vmov	s13, r7
 800281c:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8002820:	ee37 7a65 	vsub.f32	s14, s14, s11
 8002824:	ee65 7a05 	vmul.f32	s15, s10, s10
 8002828:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800282c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8002994 <__ieee754_powf+0x3f4>
 8002830:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8002998 <__ieee754_powf+0x3f8>
 8002834:	eee7 5a87 	vfma.f32	s11, s15, s14
 8002838:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800299c <__ieee754_powf+0x3fc>
 800283c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8002840:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8002970 <__ieee754_powf+0x3d0>
 8002844:	eee7 5a27 	vfma.f32	s11, s14, s15
 8002848:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80029a0 <__ieee754_powf+0x400>
 800284c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8002850:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80029a4 <__ieee754_powf+0x404>
 8002854:	ee26 6a24 	vmul.f32	s12, s12, s9
 8002858:	eee7 5a27 	vfma.f32	s11, s14, s15
 800285c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8002860:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8002864:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002868:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800286c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8002870:	eef0 5a67 	vmov.f32	s11, s15
 8002874:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8002878:	ee75 5a87 	vadd.f32	s11, s11, s14
 800287c:	ee15 1a90 	vmov	r1, s11
 8002880:	4019      	ands	r1, r3
 8002882:	ee05 1a90 	vmov	s11, r1
 8002886:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800288a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800288e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002892:	ee67 7a85 	vmul.f32	s15, s15, s10
 8002896:	eee6 7a25 	vfma.f32	s15, s12, s11
 800289a:	eeb0 6a67 	vmov.f32	s12, s15
 800289e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80028a2:	ee16 1a10 	vmov	r1, s12
 80028a6:	4019      	ands	r1, r3
 80028a8:	ee06 1a10 	vmov	s12, r1
 80028ac:	eeb0 7a46 	vmov.f32	s14, s12
 80028b0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80028b4:	493c      	ldr	r1, [pc, #240]	@ (80029a8 <__ieee754_powf+0x408>)
 80028b6:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80028ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028be:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80029ac <__ieee754_powf+0x40c>
 80028c2:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80029b0 <__ieee754_powf+0x410>
 80028c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ca:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80029b4 <__ieee754_powf+0x414>
 80028ce:	eee6 7a07 	vfma.f32	s15, s12, s14
 80028d2:	ed91 7a00 	vldr	s14, [r1]
 80028d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028da:	ee07 2a10 	vmov	s14, r2
 80028de:	4a36      	ldr	r2, [pc, #216]	@ (80029b8 <__ieee754_powf+0x418>)
 80028e0:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80028e4:	eeb0 7a67 	vmov.f32	s14, s15
 80028e8:	eea6 7a25 	vfma.f32	s14, s12, s11
 80028ec:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80028f0:	ed92 5a00 	vldr	s10, [r2]
 80028f4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80028f8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80028fc:	ee17 2a10 	vmov	r2, s14
 8002900:	401a      	ands	r2, r3
 8002902:	ee07 2a10 	vmov	s14, r2
 8002906:	ee77 6a66 	vsub.f32	s13, s14, s13
 800290a:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800290e:	eee6 6a65 	vfms.f32	s13, s12, s11
 8002912:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002916:	e715      	b.n	8002744 <__ieee754_powf+0x1a4>
 8002918:	2601      	movs	r6, #1
 800291a:	e75d      	b.n	80027d8 <__ieee754_powf+0x238>
 800291c:	d152      	bne.n	80029c4 <__ieee754_powf+0x424>
 800291e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80029bc <__ieee754_powf+0x41c>
 8002922:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002926:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800292a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800292e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002932:	f73f af29 	bgt.w	8002788 <__ieee754_powf+0x1e8>
 8002936:	2386      	movs	r3, #134	@ 0x86
 8002938:	e048      	b.n	80029cc <__ieee754_powf+0x42c>
 800293a:	4a21      	ldr	r2, [pc, #132]	@ (80029c0 <__ieee754_powf+0x420>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d907      	bls.n	8002950 <__ieee754_powf+0x3b0>
 8002940:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002948:	bf4c      	ite	mi
 800294a:	2001      	movmi	r0, #1
 800294c:	2000      	movpl	r0, #0
 800294e:	e6c7      	b.n	80026e0 <__ieee754_powf+0x140>
 8002950:	d138      	bne.n	80029c4 <__ieee754_powf+0x424>
 8002952:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002956:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800295a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295e:	dbea      	blt.n	8002936 <__ieee754_powf+0x396>
 8002960:	e7ee      	b.n	8002940 <__ieee754_powf+0x3a0>
 8002962:	bf00      	nop
 8002964:	00000000 	.word	0x00000000
 8002968:	3f7ffff3 	.word	0x3f7ffff3
 800296c:	3f800007 	.word	0x3f800007
 8002970:	3eaaaaab 	.word	0x3eaaaaab
 8002974:	3fb8aa00 	.word	0x3fb8aa00
 8002978:	3fb8aa3b 	.word	0x3fb8aa3b
 800297c:	36eca570 	.word	0x36eca570
 8002980:	4b800000 	.word	0x4b800000
 8002984:	001cc471 	.word	0x001cc471
 8002988:	005db3d6 	.word	0x005db3d6
 800298c:	080077ac 	.word	0x080077ac
 8002990:	fffff000 	.word	0xfffff000
 8002994:	3e6c3255 	.word	0x3e6c3255
 8002998:	3e53f142 	.word	0x3e53f142
 800299c:	3e8ba305 	.word	0x3e8ba305
 80029a0:	3edb6db7 	.word	0x3edb6db7
 80029a4:	3f19999a 	.word	0x3f19999a
 80029a8:	0800779c 	.word	0x0800779c
 80029ac:	3f76384f 	.word	0x3f76384f
 80029b0:	3f763800 	.word	0x3f763800
 80029b4:	369dc3a0 	.word	0x369dc3a0
 80029b8:	080077a4 	.word	0x080077a4
 80029bc:	3338aa3c 	.word	0x3338aa3c
 80029c0:	43160000 	.word	0x43160000
 80029c4:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80029c8:	d96f      	bls.n	8002aaa <__ieee754_powf+0x50a>
 80029ca:	15db      	asrs	r3, r3, #23
 80029cc:	3b7e      	subs	r3, #126	@ 0x7e
 80029ce:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80029d2:	4118      	asrs	r0, r3
 80029d4:	4408      	add	r0, r1
 80029d6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80029da:	4a4e      	ldr	r2, [pc, #312]	@ (8002b14 <__ieee754_powf+0x574>)
 80029dc:	3b7f      	subs	r3, #127	@ 0x7f
 80029de:	411a      	asrs	r2, r3
 80029e0:	4002      	ands	r2, r0
 80029e2:	ee07 2a10 	vmov	s14, r2
 80029e6:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80029ea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80029ee:	f1c3 0317 	rsb	r3, r3, #23
 80029f2:	4118      	asrs	r0, r3
 80029f4:	2900      	cmp	r1, #0
 80029f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80029fa:	bfb8      	it	lt
 80029fc:	4240      	neglt	r0, r0
 80029fe:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8002a02:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002b18 <__ieee754_powf+0x578>
 8002a06:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8002b1c <__ieee754_powf+0x57c>
 8002a0a:	ee16 3a90 	vmov	r3, s13
 8002a0e:	f36f 030b 	bfc	r3, #0, #12
 8002a12:	ee06 3a90 	vmov	s13, r3
 8002a16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a1a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002a1e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8002a22:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8002b20 <__ieee754_powf+0x580>
 8002a26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2a:	eee0 7a87 	vfma.f32	s15, s1, s14
 8002a2e:	eeb0 7a67 	vmov.f32	s14, s15
 8002a32:	eea6 7a86 	vfma.f32	s14, s13, s12
 8002a36:	eef0 5a47 	vmov.f32	s11, s14
 8002a3a:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8002a3e:	ee67 6a07 	vmul.f32	s13, s14, s14
 8002a42:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8002a46:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8002b24 <__ieee754_powf+0x584>
 8002a4a:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8002b28 <__ieee754_powf+0x588>
 8002a4e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8002a52:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8002b2c <__ieee754_powf+0x58c>
 8002a56:	eee6 5a26 	vfma.f32	s11, s12, s13
 8002a5a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8002b30 <__ieee754_powf+0x590>
 8002a5e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8002a62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002b34 <__ieee754_powf+0x594>
 8002a66:	eee6 5a26 	vfma.f32	s11, s12, s13
 8002a6a:	eeb0 6a47 	vmov.f32	s12, s14
 8002a6e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8002a72:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002a76:	ee67 5a06 	vmul.f32	s11, s14, s12
 8002a7a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8002a7e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8002a82:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8002a86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8002a92:	ee10 3a10 	vmov	r3, s0
 8002a96:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8002a9a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a9e:	da06      	bge.n	8002aae <__ieee754_powf+0x50e>
 8002aa0:	f000 f854 	bl	8002b4c <scalbnf>
 8002aa4:	ee20 0a08 	vmul.f32	s0, s0, s16
 8002aa8:	e592      	b.n	80025d0 <__ieee754_powf+0x30>
 8002aaa:	2000      	movs	r0, #0
 8002aac:	e7a7      	b.n	80029fe <__ieee754_powf+0x45e>
 8002aae:	ee00 3a10 	vmov	s0, r3
 8002ab2:	e7f7      	b.n	8002aa4 <__ieee754_powf+0x504>
 8002ab4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ab8:	e58a      	b.n	80025d0 <__ieee754_powf+0x30>
 8002aba:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002b38 <__ieee754_powf+0x598>
 8002abe:	e587      	b.n	80025d0 <__ieee754_powf+0x30>
 8002ac0:	eeb0 0a48 	vmov.f32	s0, s16
 8002ac4:	e584      	b.n	80025d0 <__ieee754_powf+0x30>
 8002ac6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8002aca:	f43f adbb 	beq.w	8002644 <__ieee754_powf+0xa4>
 8002ace:	2502      	movs	r5, #2
 8002ad0:	eeb0 0a48 	vmov.f32	s0, s16
 8002ad4:	f000 f832 	bl	8002b3c <fabsf>
 8002ad8:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8002adc:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8002ae0:	4647      	mov	r7, r8
 8002ae2:	d003      	beq.n	8002aec <__ieee754_powf+0x54c>
 8002ae4:	f1b8 0f00 	cmp.w	r8, #0
 8002ae8:	f47f addb 	bne.w	80026a2 <__ieee754_powf+0x102>
 8002aec:	2c00      	cmp	r4, #0
 8002aee:	bfbc      	itt	lt
 8002af0:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8002af4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	f6bf ad69 	bge.w	80025d0 <__ieee754_powf+0x30>
 8002afe:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8002b02:	ea58 0805 	orrs.w	r8, r8, r5
 8002b06:	f47f adc7 	bne.w	8002698 <__ieee754_powf+0xf8>
 8002b0a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8002b0e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8002b12:	e55d      	b.n	80025d0 <__ieee754_powf+0x30>
 8002b14:	ff800000 	.word	0xff800000
 8002b18:	3f317218 	.word	0x3f317218
 8002b1c:	3f317200 	.word	0x3f317200
 8002b20:	35bfbe8c 	.word	0x35bfbe8c
 8002b24:	b5ddea0e 	.word	0xb5ddea0e
 8002b28:	3331bb4c 	.word	0x3331bb4c
 8002b2c:	388ab355 	.word	0x388ab355
 8002b30:	bb360b61 	.word	0xbb360b61
 8002b34:	3e2aaaab 	.word	0x3e2aaaab
 8002b38:	00000000 	.word	0x00000000

08002b3c <fabsf>:
 8002b3c:	ee10 3a10 	vmov	r3, s0
 8002b40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b44:	ee00 3a10 	vmov	s0, r3
 8002b48:	4770      	bx	lr
	...

08002b4c <scalbnf>:
 8002b4c:	ee10 3a10 	vmov	r3, s0
 8002b50:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8002b54:	d02b      	beq.n	8002bae <scalbnf+0x62>
 8002b56:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8002b5a:	d302      	bcc.n	8002b62 <scalbnf+0x16>
 8002b5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8002b60:	4770      	bx	lr
 8002b62:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8002b66:	d123      	bne.n	8002bb0 <scalbnf+0x64>
 8002b68:	4b24      	ldr	r3, [pc, #144]	@ (8002bfc <scalbnf+0xb0>)
 8002b6a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002c00 <scalbnf+0xb4>
 8002b6e:	4298      	cmp	r0, r3
 8002b70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002b74:	db17      	blt.n	8002ba6 <scalbnf+0x5a>
 8002b76:	ee10 3a10 	vmov	r3, s0
 8002b7a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8002b7e:	3a19      	subs	r2, #25
 8002b80:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8002b84:	4288      	cmp	r0, r1
 8002b86:	dd15      	ble.n	8002bb4 <scalbnf+0x68>
 8002b88:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8002c04 <scalbnf+0xb8>
 8002b8c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8002c08 <scalbnf+0xbc>
 8002b90:	ee10 3a10 	vmov	r3, s0
 8002b94:	eeb0 7a67 	vmov.f32	s14, s15
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	bfb8      	it	lt
 8002b9c:	eef0 7a66 	vmovlt.f32	s15, s13
 8002ba0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8002ba4:	4770      	bx	lr
 8002ba6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8002c0c <scalbnf+0xc0>
 8002baa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002bae:	4770      	bx	lr
 8002bb0:	0dd2      	lsrs	r2, r2, #23
 8002bb2:	e7e5      	b.n	8002b80 <scalbnf+0x34>
 8002bb4:	4410      	add	r0, r2
 8002bb6:	28fe      	cmp	r0, #254	@ 0xfe
 8002bb8:	dce6      	bgt.n	8002b88 <scalbnf+0x3c>
 8002bba:	2800      	cmp	r0, #0
 8002bbc:	dd06      	ble.n	8002bcc <scalbnf+0x80>
 8002bbe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002bc2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002bc6:	ee00 3a10 	vmov	s0, r3
 8002bca:	4770      	bx	lr
 8002bcc:	f110 0f16 	cmn.w	r0, #22
 8002bd0:	da09      	bge.n	8002be6 <scalbnf+0x9a>
 8002bd2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8002c0c <scalbnf+0xc0>
 8002bd6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002c10 <scalbnf+0xc4>
 8002bda:	ee10 3a10 	vmov	r3, s0
 8002bde:	eeb0 7a67 	vmov.f32	s14, s15
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	e7d9      	b.n	8002b9a <scalbnf+0x4e>
 8002be6:	3019      	adds	r0, #25
 8002be8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8002bec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8002bf0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8002c14 <scalbnf+0xc8>
 8002bf4:	ee07 3a90 	vmov	s15, r3
 8002bf8:	e7d7      	b.n	8002baa <scalbnf+0x5e>
 8002bfa:	bf00      	nop
 8002bfc:	ffff3cb0 	.word	0xffff3cb0
 8002c00:	4c000000 	.word	0x4c000000
 8002c04:	7149f2ca 	.word	0x7149f2ca
 8002c08:	f149f2ca 	.word	0xf149f2ca
 8002c0c:	0da24260 	.word	0x0da24260
 8002c10:	8da24260 	.word	0x8da24260
 8002c14:	33000000 	.word	0x33000000

08002c18 <with_errnof>:
 8002c18:	b510      	push	{r4, lr}
 8002c1a:	ed2d 8b02 	vpush	{d8}
 8002c1e:	eeb0 8a40 	vmov.f32	s16, s0
 8002c22:	4604      	mov	r4, r0
 8002c24:	f7ff fc30 	bl	8002488 <__errno>
 8002c28:	eeb0 0a48 	vmov.f32	s0, s16
 8002c2c:	ecbd 8b02 	vpop	{d8}
 8002c30:	6004      	str	r4, [r0, #0]
 8002c32:	bd10      	pop	{r4, pc}

08002c34 <xflowf>:
 8002c34:	b130      	cbz	r0, 8002c44 <xflowf+0x10>
 8002c36:	eef1 7a40 	vneg.f32	s15, s0
 8002c3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002c3e:	2022      	movs	r0, #34	@ 0x22
 8002c40:	f7ff bfea 	b.w	8002c18 <with_errnof>
 8002c44:	eef0 7a40 	vmov.f32	s15, s0
 8002c48:	e7f7      	b.n	8002c3a <xflowf+0x6>
	...

08002c4c <__math_uflowf>:
 8002c4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002c54 <__math_uflowf+0x8>
 8002c50:	f7ff bff0 	b.w	8002c34 <xflowf>
 8002c54:	10000000 	.word	0x10000000

08002c58 <__math_oflowf>:
 8002c58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8002c60 <__math_oflowf+0x8>
 8002c5c:	f7ff bfea 	b.w	8002c34 <xflowf>
 8002c60:	70000000 	.word	0x70000000

08002c64 <__ieee754_sqrtf>:
 8002c64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8002c68:	4770      	bx	lr
	...

08002c6c <_init>:
 8002c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6e:	bf00      	nop
 8002c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c72:	bc08      	pop	{r3}
 8002c74:	469e      	mov	lr, r3
 8002c76:	4770      	bx	lr

08002c78 <_fini>:
 8002c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7a:	bf00      	nop
 8002c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c7e:	bc08      	pop	{r3}
 8002c80:	469e      	mov	lr, r3
 8002c82:	4770      	bx	lr
